/* Generated By:JJTree: Do not edit this line. ASTNumber.java */

package anl.verdi.parser;

import anl.verdi.formula.IllegalFormulaException;
import anl.verdi.util.FormulaArray;

public class ASTNumber extends SimpleNode {

	private FormulaArray val;

	public ASTNumber(int id) {
		super(id);
	}

	public ASTNumber(Parser p, int id) {
		super(p, id);
	}

	/**
	 * Evaluates this Node.
	 *
	 * @param frame
	 * @return the result of the evaluation.
	 */
	@Override
	public FormulaArray evaluate(Frame frame) throws IllegalFormulaException {
		return val;
	}

	// todo proper error handling
	private void throwError(String message) {
		throw new RuntimeException(message);
	}

	// todo proper error handling
	private void throwError(String message, Exception ex) {
		throw new RuntimeException(message, ex);
	}

	public void setInteger(String s, int radix) {
		if (s.endsWith("L") || s.endsWith("l")) {
			s = s.substring(0, s.length() - 1);
			try {
				val = new FormulaArray(Long.valueOf(s, radix).doubleValue());
			} catch (NumberFormatException ex) {
				String message = "Error creating long value";
				throwError(message, ex);
			}
		} else {
			int ndigits = s.length();
			int i = 0;
			while (i < ndigits && s.charAt(i) == '0') i++;
			if ((ndigits - i) > 11) {
				throwError("Integer literal too large");
			}

			long l = Long.valueOf(s, radix).longValue();
			if (l > 0xffffffffl || (radix == 10 && l > Integer.MAX_VALUE)) {
				throwError("Integer literal too large");
			}
			val = new FormulaArray(l);
		}
	}


	public void setFloat(String s) {
		if (s.startsWith(".")) s = "0" + s;
		if (s.endsWith("F") || s.endsWith("f")) {
			s = s.substring(0, s.length() - 1);
			try {
				val = new FormulaArray(Double.valueOf(s));
			} catch (NumberFormatException ex) {
				String message = "Error creating float value";
				throwError(message, ex);
			}
		} else {
			val = new FormulaArray(Double.valueOf(s));
		}
	}

}
