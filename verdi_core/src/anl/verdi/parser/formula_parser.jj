/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\formula_parser.jj */
/*@egen*/options {               
  STATIC=false;
}

PARSER_BEGIN(Parser)
 package anl.verdi.parser;

 import java.util.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/

  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    Parser parser = new Parser(System.in);
    try {
      ASTstart n = parser.start();
      n.dump("");
       /*
      float val = n.evaluate();
      System.out.println("val = " + val);

      if (val == 0) System.out.println("FALSE");
      else if (val == 1) System.out.println("TRUE");
      else System.out.println("Unexpected value: " + val);
      */
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Parser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
  >
  |
      < FLOAT:
          (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F"])?
        | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F"])?
        | (["0"-"9"])+ <EXPONENT> (["f", "F"])?
        >
  |   < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >

  | < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* | "0" >
}

TOKEN: /* operators */
{
    < GREATER: ">" >
|   < LESS: "<" >
|   < EQEQUAL: "==" >
|   < EQLESS: "<=" >
|   < EQGREATER: ">=" >
|   < NOT_EQUAL: "!=" >
|   < OR: "||" >
|   < AND: "&&" >
|   < PLUS: "+" >
|   < MINUS: "-" >
|   < TIMES: "*" >
|   < DIV: "/" >
|   < MOD: "%" >
|   < POW: "**" >

}

TOKEN: /* functions */
{
	< ABS: "abs" >
| < SQRT: "sqrt" >
| < SQR: "sqr" >
| < LOG: "log" >
| < EXP: "exp" >
| < LN: "ln" >
| < SIN: "sin" >
| < COS: "cos" >
| < TAN: "tan" >
| < SIND: "sind" >
| < COSD: "cosd" >
| < TAND: "tand" >

| < MEAN: "mean" >
| < SUM: "sum" >
| < MINT: "mint" >
| < MAXT: "maxt" >
| < MINX: "minx" >
| < MAXX: "maxx" >
| < MINY: "miny" >
| < MAXY: "maxy" >
| < MINZ: "minz" >
| < MAXZ: "maxz" >
| < MIN: "min" >
| < MAX: "max" >
}

TOKEN: /* numerical constants */
{
	< E: "E" >
| < PI: "PI" >
| <NROWS: "NROWS" >
| <NCOLS: "NCOLS" >
| <NLEVELS: "NLEVELS" >
}

ASTstart start() : {/*@bgen(jjtree) start */
  ASTstart jjtn000 = new ASTstart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) start */
  try {
/*@egen*/
  ConditionalOrExpression() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ConditionalOrExpression()       :
{}
{
  ConditionalAndExpression()
  ( <OR>/*@bgen(jjtree) #Or( 2) */
         {
           ASTOr jjtn001 = new ASTOr(JJTOR);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ ConditionalAndExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/ )*
}

void ConditionalAndExpression()       :
{}
{
  EqualityExpression()
  ( <AND>/*@bgen(jjtree) #And( 2) */
          {
            ASTAnd jjtn001 = new ASTAnd(JJTAND);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/ )*
}

void EqualityExpression()       :
{}
{
  RelationalExpression()
  (
     <EQEQUAL>/*@bgen(jjtree) #EqEqual( 2) */
               {
                 ASTEqEqual jjtn001 = new ASTEqEqual(JJTEQEQUAL);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/
   |
     <NOT_EQUAL>/*@bgen(jjtree) #NotEqual( 2) */
                 {
                   ASTNotEqual jjtn002 = new ASTNotEqual(JJTNOTEQUAL);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                   }
                 }
/*@egen*/
  )*
}

void RelationalExpression()       :
{}
{
  AdditiveExpression()
  (
    <LESS>/*@bgen(jjtree) #LessThan( 2) */
           {
             ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/
   |
    <GREATER>/*@bgen(jjtree) #GreaterThan( 2) */
              {
                ASTGreaterThan jjtn002 = new ASTGreaterThan(JJTGREATERTHAN);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
              }
/*@egen*/
   |
    <EQLESS>/*@bgen(jjtree) #LessEq( 2) */
             {
               ASTLessEq jjtn003 = new ASTLessEq(JJTLESSEQ);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
             }
             try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 throw (RuntimeException)jjte003;
               }
               if (jjte003 instanceof ParseException) {
                 throw (ParseException)jjte003;
               }
               throw (Error)jjte003;
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
             }
/*@egen*/
   |
    <EQGREATER>/*@bgen(jjtree) #GreaterEq( 2) */
                {
                  ASTGreaterEq jjtn004 = new ASTGreaterEq(JJTGREATEREQ);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    throw (RuntimeException)jjte004;
                  }
                  if (jjte004 instanceof ParseException) {
                    throw (ParseException)jjte004;
                  }
                  throw (Error)jjte004;
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
                }
/*@egen*/
  )*
}

void AdditiveExpression()       :
{}
{
  MultiplicativeExpression()
  (
    <PLUS>/*@bgen(jjtree) #Add( 2) */
           {
             ASTAdd jjtn001 = new ASTAdd(JJTADD);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/
   |
    <MINUS>/*@bgen(jjtree) #Subtract( 2) */
            {
              ASTSubtract jjtn002 = new ASTSubtract(JJTSUBTRACT);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/
  )*
}

void MultiplicativeExpression()       :
{}
{
	powExpression()
  (
    <TIMES>/*@bgen(jjtree) #Mul( 2) */
            {
              ASTMul jjtn001 = new ASTMul(JJTMUL);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ powExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/
   |
    <DIV>/*@bgen(jjtree) #Div( 2) */
          {
            ASTDiv jjtn002 = new ASTDiv(JJTDIV);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ powExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/
   |
    <MOD>/*@bgen(jjtree) #Mod( 2) */
          {
            ASTMod jjtn003 = new ASTMod(JJTMOD);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ powExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  2);
            }
          }
/*@egen*/
  )*
}

void powExpression()       :
{}
{
	UnaryExpression()
	(
		<POW>/*@bgen(jjtree) #Pow( 2) */
                      {
                        ASTPow jjtn001 = new ASTPow(JJTPOW);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/
	)*
}

void UnaryExpression()       : {}
{
  "(" ConditionalOrExpression() ")"
  |
  Func()
  |
  Var()
  |
  Number()
}

void Var()       :
{
  Token t;
}
{/*@bgen(jjtree) E */
                  {
                    ASTE jjtn001 = new ASTE(JJTE);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/<E>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/
	|/*@bgen(jjtree) PI */
                  {
                    ASTPI jjtn002 = new ASTPI(JJTPI);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/<PI>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
                  }
/*@egen*/
	|/*@bgen(jjtree) NRows */
                  {
                    ASTNRows jjtn003 = new ASTNRows(JJTNROWS);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                  }
                  try {
/*@egen*/<NROWS>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
                  }
/*@egen*/
	|/*@bgen(jjtree) NCols */
                  {
                    ASTNCols jjtn004 = new ASTNCols(JJTNCOLS);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
                  }
                  try {
/*@egen*/<NCOLS>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004, true);
                    }
                  }
/*@egen*/
	|/*@bgen(jjtree) NLevels */
                  {
                    ASTNLevels jjtn005 = new ASTNLevels(JJTNLEVELS);
                    boolean jjtc005 = true;
                    jjtree.openNodeScope(jjtn005);
                  }
                  try {
/*@egen*/<NLEVELS>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc005) {
                      jjtree.closeNodeScope(jjtn005, true);
                    }
                  }
/*@egen*/
	|
  t=<IDENTIFIER>/*@bgen(jjtree) Var */
  {
    ASTVar jjtn006 = new ASTVar(JJTVAR);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn006, true);
    jjtc006 = false;
  }
/*@egen*/
  {
    jjtn006.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
  }
/*@egen*/
}

void Func()       :
{}
{
  (
    <ABS> "(" ConditionalOrExpression()/*@bgen(jjtree) #Abs( 1) */
                                        {
                                          ASTAbs jjtn001 = new ASTAbs(JJTABS);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  1);
                                          }
                                        }
/*@egen*/
  |
    <SQRT> "(" ConditionalOrExpression()/*@bgen(jjtree) #Sqrt( 1) */
                                         {
                                           ASTSqrt jjtn002 = new ASTSqrt(JJTSQRT);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  1);
                                           }
                                         }
/*@egen*/
  |
    <SQR> "(" ConditionalOrExpression()/*@bgen(jjtree) #Sqr( 1) */
                                        {
                                          ASTSqr jjtn003 = new ASTSqr(JJTSQR);
                                          boolean jjtc003 = true;
                                          jjtree.openNodeScope(jjtn003);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc003) {
                                            jjtree.closeNodeScope(jjtn003,  1);
                                          }
                                        }
/*@egen*/
  |
    <LOG> "(" ConditionalOrExpression()/*@bgen(jjtree) #Log( 1) */
                                        {
                                          ASTLog jjtn004 = new ASTLog(JJTLOG);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004,  1);
                                          }
                                        }
/*@egen*/
  |
    <EXP> "(" ConditionalOrExpression()/*@bgen(jjtree) #Exp( 1) */
                                        {
                                          ASTExp jjtn005 = new ASTExp(JJTEXP);
                                          boolean jjtc005 = true;
                                          jjtree.openNodeScope(jjtn005);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc005) {
                                            jjtree.closeNodeScope(jjtn005,  1);
                                          }
                                        }
/*@egen*/
  |
    <LN> "(" ConditionalOrExpression()/*@bgen(jjtree) #Ln( 1) */
                                       {
                                         ASTLn jjtn006 = new ASTLn(JJTLN);
                                         boolean jjtc006 = true;
                                         jjtree.openNodeScope(jjtn006);
                                       }
                                       try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc006) {
                                           jjtree.closeNodeScope(jjtn006,  1);
                                         }
                                       }
/*@egen*/
  |
    <SIN> "(" ConditionalOrExpression()/*@bgen(jjtree) #Sin( 1) */
                                        {
                                          ASTSin jjtn007 = new ASTSin(JJTSIN);
                                          boolean jjtc007 = true;
                                          jjtree.openNodeScope(jjtn007);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc007) {
                                            jjtree.closeNodeScope(jjtn007,  1);
                                          }
                                        }
/*@egen*/
  |
    <COS> "(" ConditionalOrExpression()/*@bgen(jjtree) #Cos( 1) */
                                        {
                                          ASTCos jjtn008 = new ASTCos(JJTCOS);
                                          boolean jjtc008 = true;
                                          jjtree.openNodeScope(jjtn008);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc008) {
                                            jjtree.closeNodeScope(jjtn008,  1);
                                          }
                                        }
/*@egen*/
  |
    <TAN> "(" ConditionalOrExpression()/*@bgen(jjtree) #Tan( 1) */
                                        {
                                          ASTTan jjtn009 = new ASTTan(JJTTAN);
                                          boolean jjtc009 = true;
                                          jjtree.openNodeScope(jjtn009);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc009) {
                                            jjtree.closeNodeScope(jjtn009,  1);
                                          }
                                        }
/*@egen*/
  |
    <SIND> "(" ConditionalOrExpression()/*@bgen(jjtree) #Sind( 1) */
                                         {
                                           ASTSind jjtn010 = new ASTSind(JJTSIND);
                                           boolean jjtc010 = true;
                                           jjtree.openNodeScope(jjtn010);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc010) {
                                             jjtree.closeNodeScope(jjtn010,  1);
                                           }
                                         }
/*@egen*/
  |
    <COSD> "(" ConditionalOrExpression()/*@bgen(jjtree) #Cosd( 1) */
                                         {
                                           ASTCosd jjtn011 = new ASTCosd(JJTCOSD);
                                           boolean jjtc011 = true;
                                           jjtree.openNodeScope(jjtn011);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc011) {
                                             jjtree.closeNodeScope(jjtn011,  1);
                                           }
                                         }
/*@egen*/
  |
    <TAND> "(" ConditionalOrExpression()/*@bgen(jjtree) #Tand( 1) */
                                         {
                                           ASTTand jjtn012 = new ASTTand(JJTTAND);
                                           boolean jjtc012 = true;
                                           jjtree.openNodeScope(jjtn012);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc012) {
                                             jjtree.closeNodeScope(jjtn012,  1);
                                           }
                                         }
/*@egen*/
  |
    <MEAN> "(" ConditionalOrExpression()/*@bgen(jjtree) #Mean( 1) */
                                         {
                                           ASTMean jjtn013 = new ASTMean(JJTMEAN);
                                           boolean jjtc013 = true;
                                           jjtree.openNodeScope(jjtn013);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc013) {
                                             jjtree.closeNodeScope(jjtn013,  1);
                                           }
                                         }
/*@egen*/
  |
    <SUM> "(" ConditionalOrExpression()/*@bgen(jjtree) #Sum( 1) */
                                        {
                                          ASTSum jjtn014 = new ASTSum(JJTSUM);
                                          boolean jjtc014 = true;
                                          jjtree.openNodeScope(jjtn014);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc014) {
                                            jjtree.closeNodeScope(jjtn014,  1);
                                          }
                                        }
/*@egen*/
  |
    <MIN> "(" ConditionalOrExpression()/*@bgen(jjtree) #Min( 1) */
                                        {
                                          ASTMin jjtn015 = new ASTMin(JJTMIN);
                                          boolean jjtc015 = true;
                                          jjtree.openNodeScope(jjtn015);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc015) {
                                            jjtree.closeNodeScope(jjtn015,  1);
                                          }
                                        }
/*@egen*/
  |
    <MAX> "(" ConditionalOrExpression()/*@bgen(jjtree) #Max( 1) */
                                        {
                                          ASTMax jjtn016 = new ASTMax(JJTMAX);
                                          boolean jjtc016 = true;
                                          jjtree.openNodeScope(jjtn016);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc016) {
                                            jjtree.closeNodeScope(jjtn016,  1);
                                          }
                                        }
/*@egen*/
  |
    <MINT> "(" ConditionalOrExpression()/*@bgen(jjtree) #Mint( 1) */
                                         {
                                           ASTMint jjtn017 = new ASTMint(JJTMINT);
                                           boolean jjtc017 = true;
                                           jjtree.openNodeScope(jjtn017);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc017) {
                                             jjtree.closeNodeScope(jjtn017,  1);
                                           }
                                         }
/*@egen*/
  |
    <MAXT> "(" ConditionalOrExpression()/*@bgen(jjtree) #Maxt( 1) */
                                         {
                                           ASTMaxt jjtn018 = new ASTMaxt(JJTMAXT);
                                           boolean jjtc018 = true;
                                           jjtree.openNodeScope(jjtn018);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc018) {
                                             jjtree.closeNodeScope(jjtn018,  1);
                                           }
                                         }
/*@egen*/
	|
    <MAXX> "(" ConditionalOrExpression()/*@bgen(jjtree) #Maxx( 1) */
                                         {
                                           ASTMaxx jjtn019 = new ASTMaxx(JJTMAXX);
                                           boolean jjtc019 = true;
                                           jjtree.openNodeScope(jjtn019);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc019) {
                                             jjtree.closeNodeScope(jjtn019,  1);
                                           }
                                         }
/*@egen*/
  |
    <MINX> "(" ConditionalOrExpression()/*@bgen(jjtree) #Minx( 1) */
                                         {
                                           ASTMinx jjtn020 = new ASTMinx(JJTMINX);
                                           boolean jjtc020 = true;
                                           jjtree.openNodeScope(jjtn020);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc020) {
                                             jjtree.closeNodeScope(jjtn020,  1);
                                           }
                                         }
/*@egen*/
  |
    <MINY> "(" ConditionalOrExpression()/*@bgen(jjtree) #Miny( 1) */
                                         {
                                           ASTMiny jjtn021 = new ASTMiny(JJTMINY);
                                           boolean jjtc021 = true;
                                           jjtree.openNodeScope(jjtn021);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc021) {
                                             jjtree.closeNodeScope(jjtn021,  1);
                                           }
                                         }
/*@egen*/
  |
    <MAXY> "(" ConditionalOrExpression()/*@bgen(jjtree) #Maxy( 1) */
                                         {
                                           ASTMaxy jjtn022 = new ASTMaxy(JJTMAXY);
                                           boolean jjtc022 = true;
                                           jjtree.openNodeScope(jjtn022);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc022) {
                                             jjtree.closeNodeScope(jjtn022,  1);
                                           }
                                         }
/*@egen*/
  |
    <MINZ> "(" ConditionalOrExpression()/*@bgen(jjtree) #Minz( 1) */
                                         {
                                           ASTMinz jjtn023 = new ASTMinz(JJTMINZ);
                                           boolean jjtc023 = true;
                                           jjtree.openNodeScope(jjtn023);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc023) {
                                             jjtree.closeNodeScope(jjtn023,  1);
                                           }
                                         }
/*@egen*/
  |
    <MAXZ> "(" ConditionalOrExpression()/*@bgen(jjtree) #Maxz( 1) */
                                         {
                                           ASTMaxz jjtn024 = new ASTMaxz(JJTMAXZ);
                                           boolean jjtc024 = true;
                                           jjtree.openNodeScope(jjtn024);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc024) {
                                             jjtree.closeNodeScope(jjtn024,  1);
                                           }
                                         }
/*@egen*/
  )
}

void Number()       :
{
    Token t;
}
{
    "-"/*@bgen(jjtree) #Neg( 1) */
        {
          ASTNeg jjtn001 = new ASTNeg(JJTNEG);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ Number()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/
   |/*@bgen(jjtree) Number */
   {
     ASTNumber jjtn002 = new ASTNumber(JJTNUMBER);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/
   ((
        t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn002, true);
                              jjtc002 = false;
                            }
/*@egen*/ { jjtn002.setInteger(t.image, 10); }
    )
|   (
        t=<FLOAT>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                  }
/*@egen*/ { jjtn002.setFloat(t.image); }
    ))/*@bgen(jjtree)*/
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/
}

TOKEN :
{
  < IDENTIFIER: (<LETTER> (<LETTER>|<DIGIT>)*) (":" <DIGIT> (<DIGIT>)*)? >
|
  < #LETTER: ["_","a"-"z","A"-"Z", "[", "]"] >
|
  < #DIGIT: ["0"-"9"] >
}


