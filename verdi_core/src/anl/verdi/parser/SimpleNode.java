/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

package anl.verdi.parser;

import org.apache.logging.log4j.LogManager;		// 2014
import org.apache.logging.log4j.Logger;			// 2014 replacing System.out.println with logger messages

import anl.verdi.formula.IllegalFormulaException;
import anl.verdi.util.FormulaArray;

public class SimpleNode implements Node {

//	private static final int PRECISION = 10;
	static final Logger Logger = LogManager.getLogger(SimpleNode.class.getName());

	protected static final double DEG_TO_RAD_FACTOR = 180 * Math.PI;

	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Parser parser;
	protected Object info;

	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(Parser p, int i) {
		this(i);
		parser = p;
	}

	public Object getInfo() {
		return info;
	}

	public void setInfo(Object info) {
		this.info = info;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	/* You can override these two methods in subclasses of SimpleNode to
			 customize the way the node appears when the tree is dumped.  If
			 your output uses more than one line you should override
			 toString(String), otherwise overriding toString() is probably all
			 you need to do. */

	public String toString() {
		return ParserTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

	/* Override this method if you want to customize how the node dumps
			 out its children. */

	public void dump(String prefix) {
		Logger.debug(toString(prefix));
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}

	/**
	 * Gathers info about this node and places it into the info object.
	 *
	 * @param info collection of tree info
	 */
	public void gatherInfo(ASTTreeInfo info) {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				n.gatherInfo(info);
			}
		}
	}

	/**
	 * Evaluates this Node.
	 *
	 * @param frame
	 * @return the result of the evaluation.
	 */
	public FormulaArray evaluate(Frame frame) throws IllegalFormulaException {
		throw new UnsupportedOperationException("Evaluate not yet implemented");
	}

	/**
	 * Performs any node level preprocessing prior
	 * to any evaluation. This should only be called
	 * once on the tree. This default implementation just
	 * calls preprocess on its children.
	 *
	 * @param frame
	 */
	public void preprocess(Frame frame) throws IllegalFormulaException {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				n.preprocess(frame);
			}
		}
	}
}

