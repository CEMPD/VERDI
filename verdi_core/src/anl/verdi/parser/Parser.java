/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
 package anl.verdi.parser;
 import org.apache.logging.log4j.LogManager;		// 2014
 import org.apache.logging.log4j.Logger;			// 2014 replacing System.out.println with logger messages

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
	static final Logger Logger = LogManager.getLogger(Parser.class.getName());
  protected JJTParserState jjtree = new JJTParserState();
  public static void main(String args[]) {
    Logger.debug("Reading from standard input...");
    Parser parser = new Parser(System.in);
    try {
      ASTstart n = parser.start();
      n.dump("");
       /*
      float val = n.evaluate();
      Logger.debug("val = " + val);

      if (val == 0) Logger.debug("FALSE");
      else if (val == 1) Logger.debug("TRUE");
      else Logger.debug("Unexpected value: " + val);
      */
      Logger.debug("Thank you.");
    } catch (Exception e) {
      Logger.error("Oops.");
      Logger.error(e.getMessage());
      e.printStackTrace();
    }
  }

  final public ASTstart start() throws ParseException {
                    /*@bgen(jjtree) start */
  ASTstart jjtn000 = new ASTstart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalOrExpression();
      jj_consume_token(54);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
           ASTOr jjtn001 = new ASTOr(JJTOR);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    EqualityExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
            ASTAnd jjtn001 = new ASTAnd(JJTAND);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        EqualityExpression();
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQEQUAL:
      case NOT_EQUAL:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQEQUAL:
        jj_consume_token(EQEQUAL);
                 ASTEqEqual jjtn001 = new ASTEqEqual(JJTEQEQUAL);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
          RelationalExpression();
        } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
        }
        break;
      case NOT_EQUAL:
        jj_consume_token(NOT_EQUAL);
                   ASTNotEqual jjtn002 = new ASTNotEqual(JJTNOTEQUAL);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
        try {
          RelationalExpression();
        } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
        } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                   }
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
      case LESS:
      case EQLESS:
      case EQGREATER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        jj_consume_token(LESS);
             ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
        try {
          AdditiveExpression();
        } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
        } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
        }
        break;
      case GREATER:
        jj_consume_token(GREATER);
                ASTGreaterThan jjtn002 = new ASTGreaterThan(JJTGREATERTHAN);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
        try {
          AdditiveExpression();
        } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte002;}
                }
                if (jjte002 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte002;}
                }
                {if (true) throw (Error)jjte002;}
        } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
        }
        break;
      case EQLESS:
        jj_consume_token(EQLESS);
               ASTLessEq jjtn003 = new ASTLessEq(JJTLESSEQ);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
        try {
          AdditiveExpression();
        } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte003;}
               }
               if (jjte003 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte003;}
               }
               {if (true) throw (Error)jjte003;}
        } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
        }
        break;
      case EQGREATER:
        jj_consume_token(EQGREATER);
                  ASTGreaterEq jjtn004 = new ASTGreaterEq(JJTGREATEREQ);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
        try {
          AdditiveExpression();
        } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte004;}
                  }
                  if (jjte004 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte004;}
                  }
                  {if (true) throw (Error)jjte004;}
        } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
             ASTAdd jjtn001 = new ASTAdd(JJTADD);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
        } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
              ASTSubtract jjtn002 = new ASTSubtract(JJTSUBTRACT);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
        } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    powExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
              ASTMul jjtn001 = new ASTMul(JJTMUL);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
          powExpression();
        } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
        }
        break;
      case DIV:
        jj_consume_token(DIV);
            ASTDiv jjtn002 = new ASTDiv(JJTDIV);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
        try {
          powExpression();
        } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
        } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
        }
        break;
      case MOD:
        jj_consume_token(MOD);
            ASTMod jjtn003 = new ASTMod(JJTMOD);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
        try {
          powExpression();
        } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte003;}
            }
            if (jjte003 instanceof ParseException) {
              {if (true) throw (ParseException)jjte003;}
            }
            {if (true) throw (Error)jjte003;}
        } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  2);
            }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void powExpression() throws ParseException {
    UnaryExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POW:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      jj_consume_token(POW);
                        ASTPow jjtn001 = new ASTPow(JJTPOW);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
        UnaryExpression();
      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      ConditionalOrExpression();
      jj_consume_token(56);
      break;
    case ABS:
    case SQRT:
    case SQR:
    case LOG:
    case EXP:
    case LN:
    case SIN:
    case COS:
    case TAN:
    case SIND:
    case COSD:
    case TAND:
    case MEAN:
    case SUM:
    case MINT:
    case MAXT:
    case MINX:
    case MAXX:
    case MINY:
    case MAXY:
    case MINZ:
    case MAXZ:
    case MIN:
    case MAX:
      Func();
      break;
    case E:
    case PI:
    case NROWS:
    case NCOLS:
    case NLAYERS:
    case IDENTIFIER:
      Var();
      break;
    case INTEGER_LITERAL:
    case FLOAT:
    case MINUS:
      Number();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Var() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case E:
                    ASTE jjtn001 = new ASTE(JJTE);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(E);
      } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
      }
      break;
    case PI:
                    ASTPI jjtn002 = new ASTPI(JJTPI);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(PI);
      } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
      }
      break;
    case NROWS:
                    ASTNRows jjtn003 = new ASTNRows(JJTNROWS);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(NROWS);
      } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
      }
      break;
    case NCOLS:
                    ASTNCols jjtn004 = new ASTNCols(JJTNCOLS);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(NCOLS);
      } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004, true);
                    }
      }
      break;
    case NLAYERS:
                    ASTNLayers jjtn005 = new ASTNLayers(JJTNLEVELS);
                    boolean jjtc005 = true;
                    jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(NLAYERS);
      } finally {
                    if (jjtc005) {
                      jjtree.closeNodeScope(jjtn005, true);
                    }
      }
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
    ASTVar jjtn006 = new ASTVar(JJTVAR);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
      try {
    jjtree.closeNodeScope(jjtn006, true);
    jjtc006 = false;
    jjtn006.setName(t.image);
      } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Func() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABS:
      jj_consume_token(ABS);
      jj_consume_token(55);
      ConditionalOrExpression();
                                          ASTAbs jjtn001 = new ASTAbs(JJTABS);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(56);
      } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  1);
                                          }
      }
      break;
    case SQRT:
      jj_consume_token(SQRT);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTSqrt jjtn002 = new ASTSqrt(JJTSQRT);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  1);
                                           }
      }
      break;
    case SQR:
      jj_consume_token(SQR);
      jj_consume_token(55);
      ConditionalOrExpression();
                                          ASTSqr jjtn003 = new ASTSqr(JJTSQR);
                                          boolean jjtc003 = true;
                                          jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(56);
      } finally {
                                          if (jjtc003) {
                                            jjtree.closeNodeScope(jjtn003,  1);
                                          }
      }
      break;
    case LOG:
      jj_consume_token(LOG);
      jj_consume_token(55);
      ConditionalOrExpression();
                                          ASTLog jjtn004 = new ASTLog(JJTLOG);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(56);
      } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004,  1);
                                          }
      }
      break;
    case EXP:
      jj_consume_token(EXP);
      jj_consume_token(55);
      ConditionalOrExpression();
                                          ASTExp jjtn005 = new ASTExp(JJTEXP);
                                          boolean jjtc005 = true;
                                          jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(56);
      } finally {
                                          if (jjtc005) {
                                            jjtree.closeNodeScope(jjtn005,  1);
                                          }
      }
      break;
    case LN:
      jj_consume_token(LN);
      jj_consume_token(55);
      ConditionalOrExpression();
                                         ASTLn jjtn006 = new ASTLn(JJTLN);
                                         boolean jjtc006 = true;
                                         jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(56);
      } finally {
                                         if (jjtc006) {
                                           jjtree.closeNodeScope(jjtn006,  1);
                                         }
      }
      break;
    case SIN:
      jj_consume_token(SIN);
      jj_consume_token(55);
      ConditionalOrExpression();
                                          ASTSin jjtn007 = new ASTSin(JJTSIN);
                                          boolean jjtc007 = true;
                                          jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(56);
      } finally {
                                          if (jjtc007) {
                                            jjtree.closeNodeScope(jjtn007,  1);
                                          }
      }
      break;
    case COS:
      jj_consume_token(COS);
      jj_consume_token(55);
      ConditionalOrExpression();
                                          ASTCos jjtn008 = new ASTCos(JJTCOS);
                                          boolean jjtc008 = true;
                                          jjtree.openNodeScope(jjtn008);
      try {
        jj_consume_token(56);
      } finally {
                                          if (jjtc008) {
                                            jjtree.closeNodeScope(jjtn008,  1);
                                          }
      }
      break;
    case TAN:
      jj_consume_token(TAN);
      jj_consume_token(55);
      ConditionalOrExpression();
                                          ASTTan jjtn009 = new ASTTan(JJTTAN);
                                          boolean jjtc009 = true;
                                          jjtree.openNodeScope(jjtn009);
      try {
        jj_consume_token(56);
      } finally {
                                          if (jjtc009) {
                                            jjtree.closeNodeScope(jjtn009,  1);
                                          }
      }
      break;
    case SIND:
      jj_consume_token(SIND);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTSind jjtn010 = new ASTSind(JJTSIND);
                                           boolean jjtc010 = true;
                                           jjtree.openNodeScope(jjtn010);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc010) {
                                             jjtree.closeNodeScope(jjtn010,  1);
                                           }
      }
      break;
    case COSD:
      jj_consume_token(COSD);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTCosd jjtn011 = new ASTCosd(JJTCOSD);
                                           boolean jjtc011 = true;
                                           jjtree.openNodeScope(jjtn011);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc011) {
                                             jjtree.closeNodeScope(jjtn011,  1);
                                           }
      }
      break;
    case TAND:
      jj_consume_token(TAND);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTTand jjtn012 = new ASTTand(JJTTAND);
                                           boolean jjtc012 = true;
                                           jjtree.openNodeScope(jjtn012);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc012) {
                                             jjtree.closeNodeScope(jjtn012,  1);
                                           }
      }
      break;
    case MEAN:
      jj_consume_token(MEAN);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTMean jjtn013 = new ASTMean(JJTMEAN);
                                           boolean jjtc013 = true;
                                           jjtree.openNodeScope(jjtn013);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc013) {
                                             jjtree.closeNodeScope(jjtn013,  1);
                                           }
      }
      break;
    case SUM:
      jj_consume_token(SUM);
      jj_consume_token(55);
      ConditionalOrExpression();
                                          ASTSum jjtn014 = new ASTSum(JJTSUM);
                                          boolean jjtc014 = true;
                                          jjtree.openNodeScope(jjtn014);
      try {
        jj_consume_token(56);
      } finally {
                                          if (jjtc014) {
                                            jjtree.closeNodeScope(jjtn014,  1);
                                          }
      }
      break;
    case MIN:
      jj_consume_token(MIN);
      jj_consume_token(55);
      ConditionalOrExpression();
                                          ASTMin jjtn015 = new ASTMin(JJTMIN);
                                          boolean jjtc015 = true;
                                          jjtree.openNodeScope(jjtn015);
      try {
        jj_consume_token(56);
      } finally {
                                          if (jjtc015) {
                                            jjtree.closeNodeScope(jjtn015,  1);
                                          }
      }
      break;
    case MAX:
      jj_consume_token(MAX);
      jj_consume_token(55);
      ConditionalOrExpression();
                                          ASTMax jjtn016 = new ASTMax(JJTMAX);
                                          boolean jjtc016 = true;
                                          jjtree.openNodeScope(jjtn016);
      try {
        jj_consume_token(56);
      } finally {
                                          if (jjtc016) {
                                            jjtree.closeNodeScope(jjtn016,  1);
                                          }
      }
      break;
    case MINT:
      jj_consume_token(MINT);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTMint jjtn017 = new ASTMint(JJTMINT);
                                           boolean jjtc017 = true;
                                           jjtree.openNodeScope(jjtn017);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc017) {
                                             jjtree.closeNodeScope(jjtn017,  1);
                                           }
      }
      break;
    case MAXT:
      jj_consume_token(MAXT);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTMaxt jjtn018 = new ASTMaxt(JJTMAXT);
                                           boolean jjtc018 = true;
                                           jjtree.openNodeScope(jjtn018);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc018) {
                                             jjtree.closeNodeScope(jjtn018,  1);
                                           }
      }
      break;
    case MAXX:
      jj_consume_token(MAXX);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTMaxx jjtn019 = new ASTMaxx(JJTMAXX);
                                           boolean jjtc019 = true;
                                           jjtree.openNodeScope(jjtn019);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc019) {
                                             jjtree.closeNodeScope(jjtn019,  1);
                                           }
      }
      break;
    case MINX:
      jj_consume_token(MINX);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTMinx jjtn020 = new ASTMinx(JJTMINX);
                                           boolean jjtc020 = true;
                                           jjtree.openNodeScope(jjtn020);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc020) {
                                             jjtree.closeNodeScope(jjtn020,  1);
                                           }
      }
      break;
    case MINY:
      jj_consume_token(MINY);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTMiny jjtn021 = new ASTMiny(JJTMINY);
                                           boolean jjtc021 = true;
                                           jjtree.openNodeScope(jjtn021);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc021) {
                                             jjtree.closeNodeScope(jjtn021,  1);
                                           }
      }
      break;
    case MAXY:
      jj_consume_token(MAXY);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTMaxy jjtn022 = new ASTMaxy(JJTMAXY);
                                           boolean jjtc022 = true;
                                           jjtree.openNodeScope(jjtn022);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc022) {
                                             jjtree.closeNodeScope(jjtn022,  1);
                                           }
      }
      break;
    case MINZ:
      jj_consume_token(MINZ);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTMinz jjtn023 = new ASTMinz(JJTMINZ);
                                           boolean jjtc023 = true;
                                           jjtree.openNodeScope(jjtn023);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc023) {
                                             jjtree.closeNodeScope(jjtn023,  1);
                                           }
      }
      break;
    case MAXZ:
      jj_consume_token(MAXZ);
      jj_consume_token(55);
      ConditionalOrExpression();
                                           ASTMaxz jjtn024 = new ASTMaxz(JJTMAXZ);
                                           boolean jjtc024 = true;
                                           jjtree.openNodeScope(jjtn024);
      try {
        jj_consume_token(56);
      } finally {
                                           if (jjtc024) {
                                             jjtree.closeNodeScope(jjtn024,  1);
                                           }
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Number() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
          ASTNeg jjtn001 = new ASTNeg(JJTNEG);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        Number();
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
      }
      break;
    case INTEGER_LITERAL:
    case FLOAT:
     ASTNumber jjtn002 = new ASTNumber(JJTNUMBER);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          t = jj_consume_token(INTEGER_LITERAL);
                              jjtree.closeNodeScope(jjtn002, true);
                              jjtc002 = false;
                              jjtn002.setInteger(t.image, 10);
          break;
        case FLOAT:
          t = jj_consume_token(FLOAT);
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.setFloat(t.image);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20000,0x40000,0x12000,0x12000,0xd800,0xd800,0x180000,0x180000,0xe00000,0xe00000,0x1000000,0xfe100180,0x0,0xfe000000,0x180,0x100180,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2bfffff,0x23e0000,0x1ffff,0x0,0x0,};
   }

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[60];
    for (int i = 0; i < 60; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
