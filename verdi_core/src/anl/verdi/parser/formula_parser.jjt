options {
  MULTI=true;
  STATIC=false;
}

PARSER_BEGIN(Parser)
 package anl.verdi.parser;

 import java.util.*;

public class Parser {

  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    Parser parser = new Parser(System.in);
    try {
      ASTstart n = parser.start();
      n.dump("");
       /*
      float val = n.evaluate();
      System.out.println("val = " + val);

      if (val == 0) System.out.println("FALSE");
      else if (val == 1) System.out.println("TRUE");
      else System.out.println("Unexpected value: " + val);
      */
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Parser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
  >
  |
      < FLOAT:
          (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F"])?
        | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F"])?
        | (["0"-"9"])+ <EXPONENT> (["f", "F"])?
        >
  |   < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >

  | < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* | "0" >
}

TOKEN: /* operators */
{
    < GREATER: ">" >
|   < LESS: "<" >
|   < EQEQUAL: "==" >
|   < EQLESS: "<=" >
|   < EQGREATER: ">=" >
|   < NOT_EQUAL: "!=" >
|   < OR: "||" >
|   < AND: "&&" >
|   < PLUS: "+" >
|   < MINUS: "-" >
|   < TIMES: "*" >
|   < DIV: "/" >
|   < MOD: "%" >
|   < POW: "**" >

}

TOKEN: /* functions */
{
	< ABS: "abs" >
| < SQRT: "sqrt" >
| < SQR: "sqr" >
| < LOG: "log" >
| < EXP: "exp" >
| < LN: "ln" >
| < SIN: "sin" >
| < COS: "cos" >
| < TAN: "tan" >
| < SIND: "sind" >
| < COSD: "cosd" >
| < TAND: "tand" >

| < MEAN: "mean" >
| < SUM: "sum" >
| < MINT: "mint" >
| < MAXT: "maxt" >
| < MINX: "minx" >
| < MAXX: "maxx" >
| < MINY: "miny" >
| < MAXY: "maxy" >
| < MINZ: "minz" >
| < MAXZ: "maxz" >
| < MIN: "min" >
| < MAX: "max" >
}

TOKEN: /* numerical constants */
{
	< E: "E" >
| < PI: "PI" >
| <NROWS: "NROWS" >
| <NCOLS: "NCOLS" >
| <NLEVELS: "NLEVELS" >
}

ASTstart start() : {}
{
  ConditionalOrExpression() ";"
  { return jjtThis; }
}

void ConditionalOrExpression() #void :
{}
{
  ConditionalAndExpression()
  ( <OR> ConditionalAndExpression() #Or(2) )*
}

void ConditionalAndExpression() #void :
{}
{
  EqualityExpression()
  ( <AND> EqualityExpression() #And(2) )*
}

void EqualityExpression() #void :
{}
{
  RelationalExpression()
  (
     <EQEQUAL> RelationalExpression() #EqEqual(2)
   |
     <NOT_EQUAL> RelationalExpression() #NotEqual(2)
  )*
}

void RelationalExpression() #void :
{}
{
  AdditiveExpression()
  (
    <LESS> AdditiveExpression() #LessThan(2)
   |
    <GREATER> AdditiveExpression() #GreaterThan(2)
   |
    <EQLESS> AdditiveExpression() #LessEq(2)
   |
    <EQGREATER> AdditiveExpression() #GreaterEq(2)
  )*
}

void AdditiveExpression() #void :
{}
{
  MultiplicativeExpression()
  (
    <PLUS> MultiplicativeExpression() #Add(2)
   |
    <MINUS> MultiplicativeExpression() #Subtract(2)
  )*
}

void MultiplicativeExpression() #void :
{}
{
	powExpression()
  (
    <TIMES> powExpression() #Mul(2)
   |
    <DIV> powExpression() #Div(2)
   |
    <MOD> powExpression() #Mod(2)
  )*
}

void powExpression() #void :
{}
{
	UnaryExpression()
	(
		<POW> UnaryExpression() #Pow(2)
	)*
}

void UnaryExpression() #void : {}
{
  "(" ConditionalOrExpression() ")"
  |
  Func()
  |
  Var()
  |
  Number()
}

void Var() #void :
{
  Token t;
}
{
		t=<E> #E
	|
		t=<PI> #PI
	|
		t=<NROWS> #NRows
	|
		t=<NCOLS> #NCols
	|
		t=<NLEVELS> #NLevels
	|
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
  } #Var
}

void Func() # void:
{}
{
  (
    <ABS> "(" ConditionalOrExpression() ")" #Abs(1)
  |
    <SQRT> "(" ConditionalOrExpression() ")" #Sqrt(1)
  |
    <SQR> "(" ConditionalOrExpression() ")" #Sqr(1)
  |
    <LOG> "(" ConditionalOrExpression() ")" #Log(1)
  |
    <EXP> "(" ConditionalOrExpression() ")" #Exp(1)
  |
    <LN> "(" ConditionalOrExpression() ")" #Ln(1)
  |
    <SIN> "(" ConditionalOrExpression() ")" #Sin(1)
  |
    <COS> "(" ConditionalOrExpression() ")" #Cos(1)
  |
    <TAN> "(" ConditionalOrExpression() ")" #Tan(1)
  |
    <SIND> "(" ConditionalOrExpression() ")" #Sind(1)
  |
    <COSD> "(" ConditionalOrExpression() ")" #Cosd(1)
  |
    <TAND> "(" ConditionalOrExpression() ")" #Tand(1)
  |
    <MEAN> "(" ConditionalOrExpression() ")" #Mean(1)
  |
    <SUM> "(" ConditionalOrExpression() ")" #Sum(1)
  |
    <MIN> "(" ConditionalOrExpression() ")" #Min(1)
  |
    <MAX> "(" ConditionalOrExpression() ")" #Max(1)
  |
    <MINT> "(" ConditionalOrExpression() ")" #Mint(1)
  |
    <MAXT> "(" ConditionalOrExpression() ")" #Maxt(1)
	|
    <MAXX> "(" ConditionalOrExpression() ")" #Maxx(1)
  |
    <MINX> "(" ConditionalOrExpression() ")" #Minx(1)
  |
    <MINY> "(" ConditionalOrExpression() ")" #Miny(1)
  |
    <MAXY> "(" ConditionalOrExpression() ")" #Maxy(1)
  |
    <MINZ> "(" ConditionalOrExpression() ")" #Minz(1)
  |
    <MAXZ> "(" ConditionalOrExpression() ")" #Maxz(1)
  )
}

void Number() #void :
{
    Token t;
}
{
    "-" Number() #Neg(1)
   |
   ((
        t=<INTEGER_LITERAL> { jjtThis.setInteger(t.image, 10); }
    )
|   (
        t=<FLOAT> { jjtThis.setFloat(t.image); }
    ))#Number
}

TOKEN :
{
  < IDENTIFIER: (<LETTER> (<LETTER>|<DIGIT>)*) (":" <DIGIT> (<DIGIT>)*)? >
|
  < #LETTER: ["_","a"-"z","A"-"Z", "[", "]"] >
|
  < #DIGIT: ["0"-"9"] >
}


