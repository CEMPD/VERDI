package anl.verdi.plot.color;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;		// 2014
import org.apache.logging.log4j.Logger;			// 2014 replacing System.out.println with logger messages

/**
 * Creates palettes that match those of the PAVE application.
 *
 * @author Nick Collier
 * @version $Revision$ $Date$
 */
public class PavePaletteCreator {
	static final Logger Logger = LogManager.getLogger(PavePaletteCreator.class.getName());
	
	public PavePaletteCreator()
	{
		// 2014 added default constructor so can see when this type of object is instantiated
		Logger.debug("in default constructor for PavePaletteCreator");
	}

	// these are the color maps -- each color is represented by an int with
	// the specified combined RGB value consisting of the red component in bits 16-23,
	// the green component in bits 8-15, and the blue component in bits 0-7.
	static int newtonmap[] = {

					0xdfdfdf, 0x0003ff, 0x0007ff, 0x000bff, 0x000fff, 0x0013ff, 0x0017ff, 0x001bff,
					0x001fff, 0x0023ff, 0x0027ff, 0x002bff, 0x002fff, 0x0033ff, 0x0037ff, 0x003bff,
					0x003fff, 0x0043ff, 0x0047ff, 0x004bff, 0x004fff, 0x0053ff, 0x0057ff, 0x005bff,
					0x005fff, 0x0063ff, 0x0067ff, 0x006bff, 0x006fff, 0x0073ff, 0x0077ff, 0x007bff,
					0x007fff, 0x0083ff, 0x0087ff, 0x008bff, 0x008fff /*0x005fff*/, 0x0093ff, 0x0097ff, 0x009bff,
					0x009fff, 0x00a3ff, 0x00a7ff, 0x00abff, 0x00afff, 0x00b3ff, 0x00b7ff, 0x00bbff,
					0x00bfff, 0x00c3ff, 0x00c7ff, 0x00cbff, 0x00cfff, 0x00d3ff, 0x00d7ff, 0x00dbff,
					0x00dfff, 0x00e3ff, 0x00e7ff, 0x00ebff, 0x00efff, 0x00f3ff, 0x00f7ff, 0x00fbff,
					0x00fffe, 0x00fffa, 0x00fff6, 0x00fff2, 0x00ffee, 0x00ffea, 0x00ffe6, 0x00ffe2,
					0x00ffdd /*0x008fff*/, 0x00ffd9, 0x00ffd5, 0x00ffd1, 0x00ffce, 0x00ffca, 0x00ffc6, 0x00ffc2,
					0x00ffbe, 0x00ffba, 0x00ffb6, 0x00ffb2, 0x00ffae, 0x00ffaa /*0x00ffdd*/, 0x00ffa6, 0x00ffa2,
					0x00ff9d, 0x00ff99, 0x00ff95, 0x00ff91, 0x00ff8e, 0x00ff8a, 0x00ff86, 0x00ff82,
					0x00ff7e, 0x00ff7a, 0x00ff76, 0x00ff72, 0x00ff6e, 0x00ff6a, 0x00ff66, 0x00ff62,
					0x00ff5d, 0x00ff59, 0x00ff55, 0x00ff51, 0x00ff4e, 0x00ff4a /*0x00ffdd*/, 0x00ff46, 0x00ff42,
					0x00ff3e, 0x00ff3a, 0x00ff36, 0x00ff32, 0x00ff2e, 0x00ff2a, 0x00ff26, 0x00ff22,
					0x00ff1e, 0x00ff1a, 0x00ff16, 0x00ff12, 0x00ff0e, 0x00ff0a, 0x00ff06, 0x00ff02,
					0x02ff00, 0x06ff00, 0x0aff00, 0x0eff00, 0x12ff00, 0x16ff00, 0x1aff00, 0x1eff00,
					0x22ff00, 0x26ff00, 0x2aff00, 0x2dff00, 0x32ff00, 0x36ff00, 0x3aff00, 0x3eff00,
					0x42ff00, 0x46ff00, 0x4aff00, 0x4eff00, 0x52ff00, 0x56ff00, 0x5aff00, 0x5eff00,
					0x62ff00, 0x66ff00, 0x6aff00, 0x6dff00, 0x72ff00, 0x76ff00, 0x7aff00, 0x7eff00,
					0x82ff00, 0x86ff00, 0x8aff00, 0x8eff00, 0x92ff00, 0x96ff00, 0x9aff00, 0x9eff00,
					0xa2ff00, 0xa6ff00, 0xaaff00, 0xadff00, 0xb2ff00, 0xb6ff00, 0xbaff00, 0xbeff00,
					0xc2ff00, 0xc6ff00, 0xcaff00, 0xceff00, 0xd2ff00, 0xd6ff00, 0xdaff00, 0xdeff00,
					0xe2ff00, 0xe6ff00, 0xeaff00, 0xeeff00, 0xf2ff00, 0xf6ff00, 0xfaff00, 0xfeff00,
					0xfffb00, 0xfff700, 0xfff300, 0xffef00, 0xffeb00, 0xffe800, 0xffe300, 0xffdf00,
					0xffdb00, 0xffd700, 0xffd300, 0xffcf00, 0xffcb00, 0xffc800, 0xffc300, 0xffbf00,
					0xffbb00, 0xffb700, 0xffb300, 0xffaf00, 0xffab00, 0xffa800, 0xffa300, 0xff9f00,
					0xff9b00, 0xff9700, 0xff9300, 0xff8f00, 0xff8b00, 0xff8700, 0xff8300, 0xff7f00,
					0xff7b00, 0xff7700, 0xff7400, 0xff6f00, 0xff6b00, 0xff6700, 0xff6400, 0xff5f00,
					0xff5b00, 0xff5700, 0xff5400, 0xff4f00, 0xff4b00, 0xff4700, 0xff4300, 0xff3f00,
					0xff3b00, 0xff3700, 0xff3300, 0xff2f00, 0xff2b00, 0xff2700, 0xff2300, 0xff1f00,
					0xff1b00, 0xff1700, 0xff1300, 0xff0f00, 0xff0b00, 0xff0700, 0xff0300, 0xff0000
	};

	static int jetmap[] = {
					0x000083, 0x000087, 0x00008b, 0x00008f, 0x000093, 0x000097, 0x00009b, 0x00009f,
					0x0000a3, 0x0000a7, 0x0000ab, 0x0000af, 0x0000b3, 0x0000b7, 0x0000bb, 0x0000bf,
					0x0000c3, 0x0000c7, 0x0000cb, 0x0000cf, 0x0000d3, 0x0000d7, 0x0000db, 0x0000df,
					0x0000e3, 0x0000e7, 0x0000eb, 0x0000ef, 0x0000f3, 0x0000f7, 0x0000fb, 0x0000ff,
					0x0003ff, 0x0007ff, 0x000bff, 0x000fff, 0x0013ff, 0x0017ff, 0x001bff, 0x001fff,
					0x0023ff, 0x0027ff, 0x002bff, 0x002fff, 0x0033ff, 0x0037ff, 0x003bff, 0x003fff,
					0x0043ff, 0x0047ff, 0x004bff, 0x004fff, 0x0053ff, 0x0057ff, 0x005bff, 0x005fff,
					0x0063ff, 0x0067ff, 0x006bff, 0x006fff, 0x0073ff, 0x0077ff, 0x007bff, 0x007fff,
					0x0083ff, 0x0087ff, 0x008bff, 0x008fff, 0x0093ff, 0x0097ff, 0x009bff, 0x009fff,
					0x00a3ff, 0x00a7ff, 0x00abff, 0x00afff, 0x00b3ff, 0x00b7ff, 0x00bbff, 0x00bfff,
					0x00c3ff, 0x00c7ff, 0x00cbff, 0x00cfff, 0x00d3ff, 0x00d7ff, 0x00dbff, 0x00dfff,
					0x00e3ff, 0x00e7ff, 0x00ebff, 0x00efff, 0x00f3ff, 0x00f7ff, 0x00fbff, 0x00ffff,
					0x03ffff, 0x07fffb, 0x0bfff7, 0x0ffff3, 0x13ffef, 0x17ffeb, 0x1bffe7, 0x1fffe3,
					0x23ffdf, 0x27ffdb, 0x2bffd7, 0x2fffd3, 0x33ffcf, 0x37ffcb, 0x3bffc7, 0x3fffc3,
					0x43ffbf, 0x47ffbb, 0x4bffb7, 0x4fffb3, 0x53ffaf, 0x57ffab, 0x5bffa7, 0x5fffa3,
					0x63ff9f, 0x67ff9b, 0x6bff97, 0x6fff93, 0x73ff8f, 0x77ff8b, 0x7bff87, 0x7fff83,
					0x83ff7f, 0x87ff7b, 0x8bff77, 0x8fff73, 0x93ff6f, 0x97ff6b, 0x9bff67, 0x9fff63,
					0xa3ff5f, 0xa7ff5b, 0xabff57, 0xafff53, 0xb3ff4f, 0xb7ff4b, 0xbbff47, 0xbfff43,
					0xc3ff3f, 0xc7ff3b, 0xcbff37, 0xcfff33, 0xd3ff2f, 0xd7ff2b, 0xdbff27, 0xdfff23,
					0xe3ff1f, 0xe7ff1b, 0xebff17, 0xefff13, 0xf3ff0f, 0xf7ff0b, 0xfbff07, 0xfeff03,
					0xfeff00, 0xfffb00, 0xfff700, 0xfff300, 0xffef00, 0xffeb00, 0xffe700, 0xffe300,
					0xffdf00, 0xffdb00, 0xffd700, 0xffd300, 0xffcf00, 0xffcb00, 0xffc700, 0xffc300,
					0xffbf00, 0xffbb00, 0xffb700, 0xffb300, 0xffaf00, 0xffab00, 0xffa700, 0xffa300,
					0xff9f00, 0xff9b00, 0xff9700, 0xff9300, 0xff8f00, 0xff8b00, 0xff8700, 0xff8300,
					0xff7f00, 0xff7b00, 0xff7700, 0xff7300, 0xff6f00, 0xff6b00, 0xff6700, 0xff6300,
					0xff5f00, 0xff5b00, 0xff5700, 0xff5300, 0xff4f00, 0xff4b00, 0xff4700, 0xff4300,
					0xff3f00, 0xff3b00, 0xff3700, 0xff3300, 0xff2f00, 0xff2b00, 0xff2700, 0xff2300,
					0xff1f00, 0xff1b00, 0xff1700, 0xff1300, 0xff0f00, 0xff0b00, 0xff0700, 0xff0300,
					0xff0000, 0xfb0000, 0xf70000, 0xf30000, 0xef0000, 0xeb0000, 0xe70000, 0xe30000,
					0xdf0000, 0xdb0000, 0xd70000, 0xd30000, 0xcf0000, 0xcb0000, 0xc70000, 0xc30000,
					0xbf0000, 0xbb0000, 0xb70000, 0xb30000, 0xaf0000, 0xab0000, 0xa70000, 0xa30000,
					0x9f0000, 0x9b0000, 0x970000, 0x930000, 0x8f0000, 0x8b0000, 0x870000, 0x830000
	};


	static int greymap[] = {
					0xffffff, 0xfdfdfd, 0xfdfdfd, 0xfbfbfb, 0xfbfbfb, 0xf9f9f9, 0xf9f9f9, 0xf8f8f8,
					0xf7f7f7, 0xf6f6f6, 0xf4f4f4, 0xf4f4f4, 0xf2f2f2, 0xf2f2f2, 0xf0f0f0, 0xf0f0f0,
					0xefefef, 0xededed, 0xededed, 0xebebeb, 0xebebeb, 0xe9e9e9, 0xe9e9e9, 0xe8e8e8,
					0xe6e6e6, 0xe6e6e6, 0xe4e4e4, 0xe4e4e4, 0xe2e2e2, 0xe2e2e2, 0xe1e1e1, 0xdfdfdf,
					0xdfdfdf, 0xdddddd, 0xdddddd, 0xdbdbdb, 0xdbdbdb, 0xdadada, 0xd8d8d8, 0xd8d8d8,
					0xd6d6d6, 0xd6d6d6, 0xd4d4d4, 0xd4d4d4, 0xd3d3d3, 0xd1d1d1, 0xd1d1d1, 0xcfcfcf,
					0xcfcfcf, 0xcdcdcd, 0xcdcdcd, 0xcccccc, 0xcbcbcb, 0xcacaca, 0xc8c8c8, 0xc8c8c8,
					0xc6c6c6, 0xc6c6c6, 0xc4c4c4, 0xc4c4c4, 0xc3c3c3, 0xc1c1c1, 0xc1c1c1, 0xbfbfbf,
					0xbfbfbf, 0xbdbdbd, 0xbcbcbc, 0xbcbcbc, 0xbababa, 0xbababa, 0xb8b8b8, 0xb8b8b8,
					0xb6b6b6, 0xb6b6b6, 0xb5b5b5, 0xb3b3b3, 0xb3b3b3, 0xb1b1b1, 0xb1b1b1, 0xafafaf,
					0xafafaf, 0xaeaeae, 0xacacac, 0xacacac, 0xaaaaaa, 0xaaaaaa, 0xa8a8a8, 0xa8a8a8,
					0xa7a7a7, 0xa5a5a5, 0xa5a5a5, 0xa3a3a3, 0xa3a3a3, 0xa1a1a1, 0xa1a1a1, 0xa0a0a0,
					0x9e9e9e, 0x9e9e9e, 0x9c9c9c, 0x9c9c9c, 0x9a9a9a, 0x9a9a9a, 0x999999, 0x979797,
					0x979797, 0x959595, 0x959595, 0x939393, 0x939393, 0x919191, 0x909090, 0x909090,
					0x8e8e8e, 0x8e8e8e, 0x8c8c8c, 0x8c8c8c, 0x8a8a8a, 0x898989, 0x898989, 0x878787,
					0x878787, 0x858585, 0x858585, 0x838383, 0x838383, 0x828282, 0x808080, 0x808080,
					0x7e7e7e, 0x7e7e7e, 0x7c7c7c, 0x7c7c7c, 0x7b7b7b, 0x797979, 0x797979, 0x777777,
					0x777777, 0x757575, 0x757575, 0x747474, 0x727272, 0x727272, 0x707070, 0x707070,
					0x6e6e6e, 0x6e6e6e, 0x6d6d6d, 0x6b6b6b, 0x6b6b6b, 0x696969, 0x696969, 0x676767,
					0x676767, 0x666666, 0x646464, 0x646464, 0x626262, 0x626262, 0x606060, 0x606060,
					0x5e5e5e, 0x5d5d5d, 0x5d5d5d, 0x5b5b5b, 0x5b5b5b, 0x595959, 0x595959, 0x575757,
					0x565656, 0x565656, 0x545454, 0x545454, 0x525252, 0x525252, 0x505050, 0x505050,
					0x4f4f4f, 0x4d4d4d, 0x4d4d4d, 0x4b4b4b, 0x4b4b4b, 0x494949, 0x494949, 0x484848,
					0x464646, 0x464646, 0x444444, 0x444444, 0x424242, 0x424242, 0x414141, 0x3f3f3f,
					0x3f3f3f, 0x3d3d3d, 0x3d3d3d, 0x3b3b3b, 0x3b3b3b, 0x3a3a3a, 0x383838, 0x383838,
					0x363636, 0x363636, 0x343434, 0x343434, 0x333333, 0x313131, 0x313131, 0x2f2f2f,
					0x2f2f2f, 0x2d2d2d, 0x2d2d2d, 0x2b2b2b, 0x2a2a2a, 0x2a2a2a, 0x282828, 0x282828,
					0x262626, 0x262626, 0x242424, 0x232323, 0x232323, 0x212121, 0x212121, 0x1f1f1f,
					0x1f1f1f, 0x1d1d1d, 0x1c1c1c, 0x1c1c1c, 0x1a1a1a, 0x1a1a1a, 0x181818, 0x181818,
					0x161616, 0x161616, 0x151515, 0x131313, 0x131313, 0x111111, 0x111111, 0x0f0f0f,
					0x0f0f0f, 0x0e0e0e, 0x0c0c0c, 0x0c0c0c, 0x0a0a0a, 0x0a0a0a, 0x080808, 0x080808,
					0x070707, 0x050505, 0x050505, 0x030303, 0x030303, 0x010101, 0x010101, 0x000000
	};


	/**
	 * Creates pave style palettes for the specified number of classes.
	 *
	 * @param classes the number of classes (tiles) in the palette
	 * @return the created palettes.
	 */
	public List<Palette> createPalettes(int classes) {
		Logger.debug("in PavePaletteCreator.createPalettes for classes = " + classes);
		List<Palette> list = new ArrayList<Palette>();
		list.add(createPalette(newtonmap, classes, "Newton RGB (AVS)"));
		list.add(createPalette(jetmap, classes, "Newton RGB (InkJet)"));
		list.add(createPalette(greymap, classes, "Grey Scale (AVS)"));
		return list;
	}

	private Palette createPalette(int[] map, int classes, String description) {
		Logger.debug("in PavePaletteCreator.createPalette");
		Color[] colors = new Color[classes];
		for (int i = 0; i < classes; i++) {
			int index = 0;
			if (i == 0) index = 0;
			else if (i == classes - 1) index = map.length - 1;
			else index = i * (map.length / (classes - 1));
//			Logger.debug("createPalette i=" + i + " classes=" + classes + " index=" + index);
			Color color = new Color(map[index]);
			colors[i] = color;
		}
//		if (map.equals(newtonmap) && classes == 8) {		// 2014 2 colors are identical, trying without this old hack
//			Logger.debug("Prior specific setting for colors[3] only");
//			colors[3] = new Color(0, 255, 221);
//		}

		return new Palette(colors, description, false);
	}
	
	/*
	private Palette createRainbow(int classes) {
		Color[] colors = new Color[classes];
		float interval = 1.0f / classes;
		for (int i = 0; i < classes; i++) {
			float val = interval * i;
			float r = 1.0f;
			float b = 1.0f;
			float g = 1.0f;
			if (val < .25) {
				r = 0f;
				g = 4 * val;
			} else if (val < .5f) {
				r = 0f;
				b = 1 + 4 * (.25f - val);
			} else if (val < .75f) {
				r = 4 * (val - .5f);
				b = 0;
			} else {
				g = 1 + 4 * (.75f - val);
				b = 0f;
			}
			colors[i] = new Color(r, g, b);
		}

		return new Palette(colors, "Rainbow");
	}

	private Palette createPalette(Color source, Color destination, int classes) {
		Color[] colors = new Color[classes];
		colors[0] = source;
		colors[classes - 1] = destination;
		if (classes > 2) {
			int count = classes - 2;
			float interval = 1.0f / count;
			for (int i = 1; i < count + 1; i++) {
				float val = interval * i;
				float red = (float) (source.getRed() + (val * (destination.getRed() - source.getRed())));
				float green = (float) (source.getGreen() + (val * (destination.getGreen() - source.getGreen())));
				float blue = (float) (source.getBlue() + (val * (destination.getBlue() - source.getBlue())));
				float alpha = (float) (source.getAlpha() + (val * (destination.getAlpha() - source.getAlpha())));
				colors[i] = new Color(red / 255, green / 255, blue / 255, alpha / 255);
			}
		}
		return new Palette(colors, "Foo");
	}
	*/
	
	public static void main(String[] args) {
		Logger.debug("<table>");
		for (int i = 0; i < newtonmap.length; i++) {
			Color color = new Color(newtonmap[i]);
			Logger.debug("<tr><td style=\"background-color:rgb(" + color.getRed() + "," + color.getGreen() + "," + color.getBlue() + ");\">Map Index " + i + " " + color.toString() + "</td></tr>");
		}
		Logger.debug("</table>");
		
		//look for duplicates
		for (int i = 0; i < newtonmap.length; i++) {
			Color color1 = new Color(newtonmap[i]);
			for (int j = 0; j < newtonmap.length; j++) {
				Color color2 = new Color(newtonmap[j]);
				if (color1.equals(color2) && i != j)
					Logger.debug("Duplicate " + color1.toString());
			}
		}
	}
}
