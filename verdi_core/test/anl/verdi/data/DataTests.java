package anl.verdi.data;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Properties;
import java.util.Random;

//import javax.measure.units.Unit;		// JScience changed its hierarchy
//import javax.measure.unit.Unit;
import org.unitsofmeasurement.unit.Unit;

import junit.framework.TestCase;

import org.apache.log4j.PropertyConfigurator;
import org.java.plugin.ObjectFactory;
import org.java.plugin.PluginManager;
import org.java.plugin.boot.DefaultPluginsCollector;
import org.java.plugin.util.ExtendedProperties;

import ucar.ma2.Array;
import ucar.ma2.Index;
import ucar.ma2.InvalidRangeException;
import anl.verdi.formula.Formula;
import anl.verdi.formula.FormulaFactory;
import anl.verdi.formula.IllegalFormulaException;
import anl.verdi.formula.ValidationResult;
import anl.verdi.util.ArrayFactory;
import anl.verdi.util.VUnits;

/**
 * @author Nick Collier
 * @version $Revision$ $Date$
 */
public class DataTests extends TestCase {

	//SST(0:3:1, 100:127:1, 150:163:1)
	private static double[][][] SST =
					{
									{
													{286.6152, 286.3801, 285.99225, 285.63336, 285.6141, 285.5659, 285.45032, 290.10577, 285.82294, 285.38705, 284.93405, 284.21747, 283.5197, 283.08694},
													{285.9755, 285.68542, 285.42346, 285.15015, 285.11252, 285.19913, 285.12338, 285.22562, 285.36673, 285.15198, 284.66013, 283.96655, 283.31525, 282.88837},
													{285.38586, 285.0908, 284.8339, 284.6223, 284.5478, 284.61346, 284.6823, 284.7728, 284.87823, 284.78082, 284.37988, 283.8058, 283.23743, 282.80286},
													{284.9308, 284.61014, 284.4452, 284.14542, 284.0642, 284.1256, 284.21902, 284.1558, 284.5554, 284.60443, 284.23196, 283.78058, 283.28003, 282.83502},
													{284.62747, 284.3813, 284.12134, 283.89972, 283.68762, 283.63565, 283.6169, 283.6214, 289.77075, 292.26718, 283.9392, 283.67252, 283.3657, 283.04794},
													{294.07968, 293.30426, 283.9926, 283.75122, 283.52255, 283.33072, 283.2717, 283.25504, 283.0642, 293.99982, 294.55228, 295.22696, 294.7849, 283.0849},
													{294.05804, 284.40332, 283.85806, 283.6701, 283.34995, 283.16406, 283.08386, 283.02017, 283.0642, 295.063, 294.50974, 294.75482, 294.87973, 294.2685},
													{285.58798, 284.3566, 283.98355, 283.61746, 283.3059, 283.11176, 283.01538, 283.0157, 283.0642, 297.82147, 294.41257, 293.4813, 294.31122, 294.8009},
													{284.58893, 284.37778, 283.97192, 283.48672, 283.21628, 283.14114, 283.11172, 283.10864, 283.08237, 299.02716, 297.91113, 294.96558, 294.04398, 294.3588},
													{293.24066, 293.5204, 284.3142, 283.49612, 283.29037, 283.3206, 283.30444, 283.2421, 283.1892, 298.00778, 298.63205, 298.07135, 295.99527, 293.89755},
													{293.16113, 291.6294, 294.40195, 294.61758, 283.3142, 283.51025, 283.44775, 283.3666, 284.59674, 295.72293, 298.11017, 298.66748, 298.1149, 295.6292},
													{293.1418, 293.26712, 293.60052, 293.9442, 283.4392, 283.49802, 283.48743, 283.46832, 287.53152, 297.25385, 297.70312, 298.40558, 299.16467, 297.50568},
													{293.03635, 292.54813, 292.54938, 293.5956, 293.89743, 283.44046, 283.4778, 283.51553, 283.1892, 297.3487, 280.3142, 296.77338, 286.6892, 283.25272},
													{293.03787, 292.8349, 293.05298, 293.7274, 293.97095, 283.20807, 283.2256, 283.21344, 283.1892, 296.45837, 296.6602, 280.3142, 280.4392, 281.62344},
													{293.06342, 293.46982, 293.6427, 293.66202, 294.12253, 294.4968, 283.02676, 282.72604, 282.5642, 296.26657, 296.874, 280.0974, 280.3707, 280.89215},
													{294.27585, 294.1288, 293.87482, 293.42798, 293.68784, 294.14777, 293.56787, 282.23007, 282.0642, 295.7267, 294.566, 279.66833, 279.8199, 280.30496},
													{293.9166, 293.8605, 293.3541, 292.987, 293.25928, 293.8132, 293.57098, 291.5922, 285.8142, 296.48886, 293.86694, 278.88828, 279.13388, 279.60345},
													{293.89474, 293.62286, 293.41782, 293.15094, 293.37766, 293.4267, 293.3785, 294.25278, 293.56927, 279.0642, 296.33618, 278.9395, 278.70078, 279.00165},
													{293.9337, 293.7142, 294.11002, 293.91635, 293.84863, 293.68393, 293.86224, 294.90726, 295.19052, 278.7239, 279.92444, 278.59967, 278.36935, 278.6149},
													{293.81915, 293.60687, 294.22736, 294.52368, 294.20776, 294.13586, 294.66345, 295.1828, 295.31903, 282.50244, 277.97714, 278.24954, 278.28482, 278.4419},
													{277.5642, 290.09506, 289.0184, 294.6057, 294.9082, 294.87027, 295.35938, 295.69327, 295.65155, 281.81076, 277.50668, 277.9502, 278.03702, 278.23837},
													{291.79248, 291.9416, 292.82104, 294.5183, 295.17572, 294.94324, 295.2636, 294.57132, 278.2672, 278.6374, 277.53424, 277.58582, 277.63675, 277.7564},
													{293.99185, 294.65543, 295.2591, 295.34436, 295.67892, 294.7994, 295.7136, 288.80167, 277.37598, 277.45447, 277.43054, 277.18457, 277.1432, 277.21677},
													{294.40598, 294.79227, 275.4392, 295.6632, 277.27405, 279.6892, 276.46118, 276.4651, 276.957, 277.0939, 277.01093, 276.81055, 276.7799, 276.98904},
													{295.31396, 294.92404, 295.23132, 278.8142, 272.9392, 275.01535, 275.11276, 275.5642, 276.64124, 276.80142, 276.76035, 276.6952, 276.79276, 277.00067},
													{275.4392, 275.4392, 276.62094, 275.81036, 274.42398, 274.9392, 275.0892, 275.86316, 276.42447, 276.61407, 276.68445, 276.85806, 276.9544, 277.3671},
													{273.5642, 275.0642, 273.9392, 273.9392, 274.1307, 275.1148, 275.43765, 276.04385, 276.39072, 276.65686, 276.84183, 277.2021, 277.54956, 278.07883},
													{273.79318, 275.22357, 275.3729, 274.62564, 274.8501, 275.3794, 275.92917, 276.4393, 276.67624, 276.92133, 277.25085, 277.6426, 278.07532, 278.70322}
									},
									{
													{286.6152, 286.3801, 285.99225, 285.63336, 285.6141, 285.5659, 285.45032, 290.10577, 285.82294, 285.38705, 284.93405, 284.21747, 283.5197, 283.08694},
													{285.9755, 285.68542, 285.42346, 285.15015, 285.11252, 285.19913, 285.12338, 285.22562, 285.36673, 285.15198, 284.66013, 283.96655, 283.31525, 282.88837},
													{285.38586, 285.0908, 284.8339, 284.6223, 284.5478, 284.61346, 284.6823, 284.7728, 284.87823, 284.78082, 284.37988, 283.8058, 283.23743, 282.80286},
													{284.9308, 284.61014, 284.4452, 284.14542, 284.0642, 284.1256, 284.21902, 284.1558, 284.5554, 284.60443, 284.23196, 283.78058, 283.28003, 282.83502},
													{284.62747, 284.3813, 284.12134, 283.89972, 283.68762, 283.63565, 283.6169, 283.6214, 289.77075, 292.26718, 283.9392, 283.67252, 283.3657, 283.04794},
													{294.07968, 293.30426, 283.9926, 283.75122, 283.52255, 283.33072, 283.2717, 283.25504, 283.0642, 293.99982, 294.55228, 295.22696, 294.7849, 283.0849},
													{294.05804, 284.40332, 283.85806, 283.6701, 283.34995, 283.16406, 283.08386, 283.02017, 283.0642, 295.063, 294.50974, 294.75482, 294.87973, 294.2685},
													{285.58798, 284.3566, 283.98355, 283.61746, 283.3059, 283.11176, 283.01538, 283.0157, 283.0642, 297.82147, 294.41257, 293.4813, 294.31122, 294.8009},
													{284.58893, 284.37778, 283.97192, 283.48672, 283.21628, 283.14114, 283.11172, 283.10864, 283.08237, 299.02716, 297.91113, 294.96558, 294.04398, 294.3588},
													{293.24066, 293.5204, 284.3142, 283.49612, 283.29037, 283.3206, 283.30444, 283.2421, 283.1892, 298.00778, 298.63205, 298.07135, 295.99527, 293.89755},
													{293.16113, 291.6294, 294.40195, 294.61758, 283.3142, 283.51025, 283.44775, 283.3666, 284.59674, 295.72293, 298.11017, 298.66748, 298.1149, 295.6292},
													{293.1418, 293.26712, 293.60052, 293.9442, 283.4392, 283.49802, 283.48743, 283.46832, 287.53152, 297.25385, 297.70312, 298.40558, 299.16467, 297.50568},
													{293.03635, 292.54813, 292.54938, 293.5956, 293.89743, 283.44046, 283.4778, 283.51553, 283.1892, 297.3487, 280.3142, 296.77338, 286.6892, 283.25272},
													{293.03787, 292.8349, 293.05298, 293.7274, 293.97095, 283.20807, 283.2256, 283.21344, 283.1892, 296.45837, 296.6602, 280.3142, 280.4392, 281.62344},
													{293.06342, 293.46982, 293.6427, 293.66202, 294.12253, 294.4968, 283.02676, 282.72604, 282.5642, 296.26657, 296.874, 280.0974, 280.3707, 280.89215},
													{294.27585, 294.1288, 293.87482, 293.42798, 293.68784, 294.14777, 293.56787, 282.23007, 282.0642, 295.7267, 294.566, 279.66833, 279.8199, 280.30496},
													{293.9166, 293.8605, 293.3541, 292.987, 293.25928, 293.8132, 293.57098, 291.5922, 285.8142, 296.48886, 293.86694, 278.88828, 279.13388, 279.60345},
													{293.89474, 293.62286, 293.41782, 293.15094, 293.37766, 293.4267, 293.3785, 294.25278, 293.56927, 279.0642, 296.33618, 278.9395, 278.70078, 279.00165},
													{293.9337, 293.7142, 294.11002, 293.91635, 293.84863, 293.68393, 293.86224, 294.90726, 295.19052, 278.7239, 279.92444, 278.59967, 278.36935, 278.6149},
													{293.81915, 293.60687, 294.22736, 294.52368, 294.20776, 294.13586, 294.66345, 295.1828, 295.31903, 282.50244, 277.97714, 278.24954, 278.28482, 278.4419},
													{277.5642, 290.09506, 289.0184, 294.6057, 294.9082, 294.87027, 295.35938, 295.69327, 295.65155, 281.81076, 277.50668, 277.9502, 278.03702, 278.23837},
													{291.79248, 291.9416, 292.82104, 294.5183, 295.17572, 294.94324, 295.2636, 294.57132, 278.2672, 278.6374, 277.53424, 277.58582, 277.63675, 277.7564},
													{293.99185, 294.65543, 295.2591, 295.34436, 295.67892, 294.7994, 295.7136, 288.80167, 277.37598, 277.45447, 277.43054, 277.18457, 277.1432, 277.21677},
													{294.40598, 294.79227, 275.4392, 295.6632, 277.27405, 279.6892, 276.46118, 276.4651, 276.957, 277.0939, 277.01093, 276.81055, 276.7799, 276.98904},
													{295.31396, 294.92404, 295.23132, 278.8142, 272.9392, 275.01535, 275.11276, 275.5642, 276.64124, 276.80142, 276.76035, 276.6952, 276.79276, 277.00067},
													{275.4392, 275.4392, 276.62094, 275.81036, 274.42398, 274.9392, 275.0892, 275.86316, 276.42447, 276.61407, 276.68445, 276.85806, 276.9544, 277.3671},
													{273.5642, 275.0642, 273.9392, 273.9392, 274.1307, 275.1148, 275.43765, 276.04385, 276.39072, 276.65686, 276.84183, 277.2021, 277.54956, 278.07883},
													{273.79318, 275.22357, 275.3729, 274.62564, 274.8501, 275.3794, 275.92917, 276.4393, 276.67624, 276.92133, 277.25085, 277.6426, 278.07532, 278.70322}
									},
									{
													{286.6152, 286.3801, 285.99225, 285.63336, 285.6141, 285.5659, 285.45032, 290.10577, 285.82294, 285.38705, 284.93405, 284.21747, 283.5197, 283.08694},
													{285.9755, 285.68542, 285.42346, 285.15015, 285.11252, 285.19913, 285.12338, 285.22562, 285.36673, 285.15198, 284.66013, 283.96655, 283.31525, 282.88837},
													{285.38586, 285.0908, 284.8339, 284.6223, 284.5478, 284.61346, 284.6823, 284.7728, 284.87823, 284.78082, 284.37988, 283.8058, 283.23743, 282.80286},
													{284.9308, 284.61014, 284.4452, 284.14542, 284.0642, 284.1256, 284.21902, 284.1558, 284.5554, 284.60443, 284.23196, 283.78058, 283.28003, 282.83502},
													{284.62747, 284.3813, 284.12134, 283.89972, 283.68762, 283.63565, 283.6169, 283.6214, 289.77075, 292.26718, 283.9392, 283.67252, 283.3657, 283.04794},
													{294.07968, 293.30426, 283.9926, 283.75122, 283.52255, 283.33072, 283.2717, 283.25504, 283.0642, 293.99982, 294.55228, 295.22696, 294.7849, 283.0849},
													{294.05804, 284.40332, 283.85806, 283.6701, 283.34995, 283.16406, 283.08386, 283.02017, 283.0642, 295.063, 294.50974, 294.75482, 294.87973, 294.2685},
													{285.58798, 284.3566, 283.98355, 283.61746, 283.3059, 283.11176, 283.01538, 283.0157, 283.0642, 297.82147, 294.41257, 293.4813, 294.31122, 294.8009},
													{284.58893, 284.37778, 283.97192, 283.48672, 283.21628, 283.14114, 283.11172, 283.10864, 283.08237, 299.02716, 297.91113, 294.96558, 294.04398, 294.3588},
													{293.24066, 293.5204, 284.3142, 283.49612, 283.29037, 283.3206, 283.30444, 283.2421, 283.1892, 298.00778, 298.63205, 298.07135, 295.99527, 293.89755},
													{293.16113, 291.6294, 294.40195, 294.61758, 283.3142, 283.51025, 283.44775, 283.3666, 284.59674, 295.72293, 298.11017, 298.66748, 298.1149, 295.6292},
													{293.1418, 293.26712, 293.60052, 293.9442, 283.4392, 283.49802, 283.48743, 283.46832, 287.53152, 297.25385, 297.70312, 298.40558, 299.16467, 297.50568},
													{293.03635, 292.54813, 292.54938, 293.5956, 293.89743, 283.44046, 283.4778, 283.51553, 283.1892, 297.3487, 280.3142, 296.77338, 286.6892, 283.25272},
													{293.03787, 292.8349, 293.05298, 293.7274, 293.97095, 283.20807, 283.2256, 283.21344, 283.1892, 296.45837, 296.6602, 280.3142, 280.4392, 281.62344},
													{293.06342, 293.46982, 293.6427, 293.66202, 294.12253, 294.4968, 283.02676, 282.72604, 282.5642, 296.26657, 296.874, 280.0974, 280.3707, 280.89215},
													{294.27585, 294.1288, 293.87482, 293.42798, 293.68784, 294.14777, 293.56787, 282.23007, 282.0642, 295.7267, 294.566, 279.66833, 279.8199, 280.30496},
													{293.9166, 293.8605, 293.3541, 292.987, 293.25928, 293.8132, 293.57098, 291.5922, 285.8142, 296.48886, 293.86694, 278.88828, 279.13388, 279.60345},
													{293.89474, 293.62286, 293.41782, 293.15094, 293.37766, 293.4267, 293.3785, 294.25278, 293.56927, 279.0642, 296.33618, 278.9395, 278.70078, 279.00165},
													{293.9337, 293.7142, 294.11002, 293.91635, 293.84863, 293.68393, 293.86224, 294.90726, 295.19052, 278.7239, 279.92444, 278.59967, 278.36935, 278.6149},
													{293.81915, 293.60687, 294.22736, 294.52368, 294.20776, 294.13586, 294.66345, 295.1828, 295.31903, 282.50244, 277.97714, 278.24954, 278.28482, 278.4419},
													{277.5642, 290.09506, 289.0184, 294.6057, 294.9082, 294.87027, 295.35938, 295.69327, 295.65155, 281.81076, 277.50668, 277.9502, 278.03702, 278.23837},
													{291.79248, 291.9416, 292.82104, 294.5183, 295.17572, 294.94324, 295.2636, 294.57132, 278.2672, 278.6374, 277.53424, 277.58582, 277.63675, 277.7564},
													{293.99185, 294.65543, 295.2591, 295.34436, 295.67892, 294.7994, 295.7136, 288.80167, 277.37598, 277.45447, 277.43054, 277.18457, 277.1432, 277.21677},
													{294.40598, 294.79227, 275.4392, 295.6632, 277.27405, 279.6892, 276.46118, 276.4651, 276.957, 277.0939, 277.01093, 276.81055, 276.7799, 276.98904},
													{295.31396, 294.92404, 295.23132, 278.8142, 272.9392, 275.01535, 275.11276, 275.5642, 276.64124, 276.80142, 276.76035, 276.6952, 276.79276, 277.00067},
													{275.4392, 275.4392, 276.62094, 275.81036, 274.42398, 274.9392, 275.0892, 275.86316, 276.42447, 276.61407, 276.68445, 276.85806, 276.9544, 277.3671},
													{273.5642, 275.0642, 273.9392, 273.9392, 274.1307, 275.1148, 275.43765, 276.04385, 276.39072, 276.65686, 276.84183, 277.2021, 277.54956, 278.07883},
													{273.79318, 275.22357, 275.3729, 274.62564, 274.8501, 275.3794, 275.92917, 276.4393, 276.67624, 276.92133, 277.25085, 277.6426, 278.07532, 278.70322}
									},
									{
													{286.6152, 286.3801, 285.99225, 285.63336, 285.6141, 285.5659, 285.45032, 290.10577, 285.82294, 285.38705, 284.93405, 284.21747, 283.5197, 283.08694},
													{285.9755, 285.68542, 285.42346, 285.15015, 285.11252, 285.19913, 285.12338, 285.22562, 285.36673, 285.15198, 284.66013, 283.96655, 283.31525, 282.88837},
													{285.38586, 285.0908, 284.8339, 284.6223, 284.5478, 284.61346, 284.6823, 284.7728, 284.87823, 284.78082, 284.37988, 283.8058, 283.23743, 282.80286},
													{284.9308, 284.61014, 284.4452, 284.14542, 284.0642, 284.1256, 284.21902, 284.1558, 284.5554, 284.60443, 284.23196, 283.78058, 283.28003, 282.83502},
													{284.62747, 284.3813, 284.12134, 283.89972, 283.68762, 283.63565, 283.6169, 283.6214, 289.77075, 292.26718, 283.9392, 283.67252, 283.3657, 283.04794},
													{294.07968, 293.30426, 283.9926, 283.75122, 283.52255, 283.33072, 283.2717, 283.25504, 283.0642, 293.99982, 294.55228, 295.22696, 294.7849, 283.0849},
													{294.05804, 284.40332, 283.85806, 283.6701, 283.34995, 283.16406, 283.08386, 283.02017, 283.0642, 295.063, 294.50974, 294.75482, 294.87973, 294.2685},
													{285.58798, 284.3566, 283.98355, 283.61746, 283.3059, 283.11176, 283.01538, 283.0157, 283.0642, 297.82147, 294.41257, 293.4813, 294.31122, 294.8009},
													{284.58893, 284.37778, 283.97192, 283.48672, 283.21628, 283.14114, 283.11172, 283.10864, 283.08237, 299.02716, 297.91113, 294.96558, 294.04398, 294.3588},
													{293.24066, 293.5204, 284.3142, 283.49612, 283.29037, 283.3206, 283.30444, 283.2421, 283.1892, 298.00778, 298.63205, 298.07135, 295.99527, 293.89755},
													{293.16113, 291.6294, 294.40195, 294.61758, 283.3142, 283.51025, 283.44775, 283.3666, 284.59674, 295.72293, 298.11017, 298.66748, 298.1149, 295.6292},
													{293.1418, 293.26712, 293.60052, 293.9442, 283.4392, 283.49802, 283.48743, 283.46832, 287.53152, 297.25385, 297.70312, 298.40558, 299.16467, 297.50568},
													{293.03635, 292.54813, 292.54938, 293.5956, 293.89743, 283.44046, 283.4778, 283.51553, 283.1892, 297.3487, 280.3142, 296.77338, 286.6892, 283.25272},
													{293.03787, 292.8349, 293.05298, 293.7274, 293.97095, 283.20807, 283.2256, 283.21344, 283.1892, 296.45837, 296.6602, 280.3142, 280.4392, 281.62344},
													{293.06342, 293.46982, 293.6427, 293.66202, 294.12253, 294.4968, 283.02676, 282.72604, 282.5642, 296.26657, 296.874, 280.0974, 280.3707, 280.89215},
													{294.27585, 294.1288, 293.87482, 293.42798, 293.68784, 294.14777, 293.56787, 282.23007, 282.0642, 295.7267, 294.566, 279.66833, 279.8199, 280.30496},
													{293.9166, 293.8605, 293.3541, 292.987, 293.25928, 293.8132, 293.57098, 291.5922, 285.8142, 296.48886, 293.86694, 278.88828, 279.13388, 279.60345},
													{293.89474, 293.62286, 293.41782, 293.15094, 293.37766, 293.4267, 293.3785, 294.25278, 293.56927, 279.0642, 296.33618, 278.9395, 278.70078, 279.00165},
													{293.9337, 293.7142, 294.11002, 293.91635, 293.84863, 293.68393, 293.86224, 294.90726, 295.19052, 278.7239, 279.92444, 278.59967, 278.36935, 278.6149},
													{293.81915, 293.60687, 294.22736, 294.52368, 294.20776, 294.13586, 294.66345, 295.1828, 295.31903, 282.50244, 277.97714, 278.24954, 278.28482, 278.4419},
													{277.5642, 290.09506, 289.0184, 294.6057, 294.9082, 294.87027, 295.35938, 295.69327, 295.65155, 281.81076, 277.50668, 277.9502, 278.03702, 278.23837},
													{291.79248, 291.9416, 292.82104, 294.5183, 295.17572, 294.94324, 295.2636, 294.57132, 278.2672, 278.6374, 277.53424, 277.58582, 277.63675, 277.7564},
													{293.99185, 294.65543, 295.2591, 295.34436, 295.67892, 294.7994, 295.7136, 288.80167, 277.37598, 277.45447, 277.43054, 277.18457, 277.1432, 277.21677},
													{294.40598, 294.79227, 275.4392, 295.6632, 277.27405, 279.6892, 276.46118, 276.4651, 276.957, 277.0939, 277.01093, 276.81055, 276.7799, 276.98904},
													{295.31396, 294.92404, 295.23132, 278.8142, 272.9392, 275.01535, 275.11276, 275.5642, 276.64124, 276.80142, 276.76035, 276.6952, 276.79276, 277.00067},
													{275.4392, 275.4392, 276.62094, 275.81036, 274.42398, 274.9392, 275.0892, 275.86316, 276.42447, 276.61407, 276.68445, 276.85806, 276.9544, 277.3671},
													{273.5642, 275.0642, 273.9392, 273.9392, 274.1307, 275.1148, 275.43765, 276.04385, 276.39072, 276.65686, 276.84183, 277.2021, 277.54956, 278.07883},
													{273.79318, 275.22357, 275.3729, 274.62564, 274.8501, 275.3794, 275.92917, 276.4393, 276.67624, 276.92133, 277.25085, 277.6426, 278.07532, 278.70322}
									}
					};


	// DRY_N(0:0:1, 0:0:1, 10:12:1, 105:110:1)
	private static double[][][][] DRY_N =

					{
									{
													{
																	{0.5457404, 0.55001736, 0.55527115, 0.5610287, 0.5648446, 0.56660295},
																	{0.59396875, 0.5977756, 0.60294914, 0.60869455, 0.61238605, 0.61389303},
																	{0.6443029, 0.64779294, 0.65138006, 0.65725166, 0.66230166, 0.6646886}
													}
									}
					};

	// DRY_S(0:0:1, 0:0:1, 10:12:1, 105:110:1)
	private static double[][][][] DRY_S =

					{
									{
													{
																	{0.23691332, 0.24691989, 0.2577209, 0.26787162, 0.2784181, 0.289426},
																	{0.2759258, 0.2867376, 0.29849693, 0.3102162, 0.32138997, 0.33260354},
																	{0.32052425, 0.33042106, 0.34222934, 0.3567737, 0.37133425, 0.38372537}
													}
									}
					};

	// O3(40:41:1, 0:0:1, 0:34:1, 0:31:1) RADM_CONC
	private static double[][][][] O3 =
					{
									{
													{
																	{0.023652043, 0.030959848, 0.022672385, 0.02443666, 0.027849704, 0.034106135, 0.045251243, 0.050175775, 0.05298111, 0.053356852, 0.054067496, 0.054740608, 0.054875787, 0.05471727, 0.05469032, 0.05360114, 0.050523177, 0.049049072, 0.049406968, 0.048829485, 0.0486053, 0.048646394, 0.046394356, 0.040300753, 0.036824167, 0.03043254, 0.025572225, 0.02125036, 0.020856548, 0.022423532, 0.024076395, 0.025858752},
																	{0.036634438, 0.036175653, 0.032634974, 0.026889361, 0.03727519, 0.047346357, 0.05530336, 0.056542497, 0.058398824, 0.059727866, 0.059861038, 0.05949473, 0.058466773, 0.056862302, 0.054972745, 0.053224053, 0.051641975, 0.051126067, 0.05188774, 0.052913215, 0.05439934, 0.056904424, 0.057373084, 0.04612697, 0.043716352, 0.0372871, 0.030841041, 0.02481626, 0.023027945, 0.02351633, 0.024849102, 0.027406208},
																	{0.038418002, 0.03782182, 0.028673388, 0.031341754, 0.04733021, 0.0563222, 0.05861619, 0.06018945, 0.059695102, 0.060408883, 0.06059259, 0.0604042, 0.060151074, 0.05907413, 0.05788245, 0.056782134, 0.055793826, 0.054824915, 0.0542659, 0.054868206, 0.056266412, 0.056164596, 0.059756305, 0.048098736, 0.048828837, 0.04408777, 0.0356043, 0.028901335, 0.022328395, 0.021663532, 0.024687227, 0.029078811},
																	{0.040174898, 0.03906188, 0.036518376, 0.041186735, 0.049645282, 0.05642771, 0.05626705, 0.056828838, 0.059488773, 0.060217865, 0.058879327, 0.058120858, 0.05899918, 0.060185738, 0.061144087, 0.061842296, 0.061846312, 0.06328577, 0.0629437, 0.061306797, 0.054501448, 0.05407479, 0.053218108, 0.053183142, 0.051271103, 0.047590904, 0.041780487, 0.034579653, 0.029618662, 0.029312138, 0.030618168, 0.029202186},
																	{0.032762706, 0.034430385, 0.040472183, 0.04394104, 0.052861672, 0.056630224, 0.053782124, 0.051831644, 0.05279371, 0.053596623, 0.056084946, 0.056668933, 0.058063854, 0.059675366, 0.059370495, 0.06039587, 0.057846773, 0.061277427, 0.066467285, 0.06642383, 0.06225108, 0.057548348, 0.0513201, 0.04975975, 0.052659247, 0.049071103, 0.04617519, 0.041534472, 0.036872014, 0.035020836, 0.032002673, 0.028358076},
																	{0.032972094, 0.036756404, 0.040587217, 0.04639807, 0.05038601, 0.050677925, 0.053158488, 0.05611577, 0.054692797, 0.05737475, 0.063254476, 0.06592679, 0.07036507, 0.06756574, 0.06224338, 0.06326759, 0.058706123, 0.058919843, 0.061310157, 0.058487043, 0.062007885, 0.061226558, 0.05984858, 0.055904966, 0.052847035, 0.05358635, 0.05215182, 0.0479485, 0.042992916, 0.03663446, 0.030918289, 0.026129417},
																	{0.034062997, 0.03822939, 0.042842954, 0.04069749, 0.050088853, 0.038803827, 0.051247116, 0.057540018, 0.058629815, 0.0531173, 0.058329035, 0.061517067, 0.07025319, 0.066527665, 0.057975065, 0.05877682, 0.0588455, 0.05783988, 0.05885169, 0.058341123, 0.059505325, 0.05893578, 0.059484042, 0.061918534, 0.058336444, 0.0552833, 0.055221803, 0.0549061, 0.04890673, 0.04316016, 0.034113016, 0.025923196},
																	{0.03466819, 0.037508015, 0.04240164, 0.043515716, 0.041123815, 0.044866767, 0.05557152, 0.056232303, 0.04821745, 0.062674224, 0.056245223, 0.060628008, 0.060093027, 0.06298411, 0.054903444, 0.058303006, 0.05789079, 0.0561693, 0.05691665, 0.058901094, 0.06071088, 0.059770964, 0.057433683, 0.058599543, 0.059671905, 0.058375966, 0.05590003, 0.056137424, 0.054439448, 0.048333697, 0.04333936, 0.03204876},
																	{0.033130452, 0.03369543, 0.0368702, 0.033295613, 0.03911041, 0.035932362, 0.04312006, 0.0463635, 0.060318578, 0.054787375, 0.053316228, 0.051082417, 0.055111285, 0.05292724, 0.05279518, 0.05628863, 0.05825381, 0.059327792, 0.058512673, 0.058872793, 0.060495753, 0.059854455, 0.059221838, 0.05755625, 0.062500834, 0.06066481, 0.058664583, 0.05630593, 0.055621695, 0.050950326, 0.05061093, 0.042455077},
																	{0.03183007, 0.03171224, 0.030612458, 0.028921958, 0.036690574, 0.038416777, 0.037310828, 0.041346088, 0.054132108, 0.05170994, 0.051577188, 0.054179095, 0.056379475, 0.057299174, 0.058074303, 0.059653796, 0.05980398, 0.059424773, 0.059010208, 0.061282646, 0.061560303, 0.05894057, 0.060883835, 0.060296945, 0.055638764, 0.062133882, 0.061641667, 0.056812674, 0.0560383, 0.05346583, 0.05399757, 0.05218641},
																	{0.033456195, 0.031206302, 0.027599223, 0.029499393, 0.033237357, 0.041086752, 0.0402663, 0.042395197, 0.053044636, 0.054735754, 0.05584344, 0.056121483, 0.055747196, 0.05840765, 0.05997872, 0.06109607, 0.058823496, 0.059559226, 0.060868, 0.059812635, 0.06466764, 0.064352214, 0.06363374, 0.06391579, 0.062406708, 0.060308985, 0.06459737, 0.061903637, 0.05658483, 0.05461979, 0.054464217, 0.05416821},
																	{0.036335547, 0.03268905, 0.031039108, 0.036968227, 0.031479016, 0.041549407, 0.039049212, 0.04828826, 0.05013593, 0.05220892, 0.053344667, 0.0570812, 0.05651264, 0.059802353, 0.062325336, 0.060105268, 0.060664676, 0.061500825, 0.063032985, 0.064724565, 0.06577766, 0.07059413, 0.06735766, 0.0670414, 0.06532037, 0.06295955, 0.0626269, 0.06362009, 0.058263298, 0.0534742, 0.056100704, 0.055901285},
																	{0.037246067, 0.040443636, 0.040878136, 0.045414504, 0.03679452, 0.04184899, 0.04363865, 0.048935175, 0.052814573, 0.054094028, 0.051418882, 0.054360464, 0.05631339, 0.05855437, 0.060823593, 0.061366957, 0.0654273, 0.0642665, 0.06643039, 0.06728411, 0.07231861, 0.07282299, 0.07526672, 0.07065874, 0.07048386, 0.069269896, 0.06816316, 0.06834829, 0.06327325, 0.058546014, 0.05891161, 0.0590455},
																	{0.035196923, 0.04387827, 0.04667854, 0.049481697, 0.040010624, 0.04222601, 0.04568201, 0.052640676, 0.05260513, 0.0541074, 0.055877276, 0.054960027, 0.05723157, 0.058366742, 0.061982427, 0.065684736, 0.066253066, 0.06195317, 0.06824952, 0.07191837, 0.07450217, 0.07761419, 0.062069144, 0.07211411, 0.068980336, 0.06882006, 0.0697183, 0.06907475, 0.06602794, 0.0597858, 0.059141155, 0.06043519},
																	{0.032798603, 0.040524922, 0.04823815, 0.051361397, 0.044311915, 0.047642328, 0.049158014, 0.05356505, 0.054900195, 0.05560212, 0.055833317, 0.05462237, 0.052918844, 0.054060224, 0.056844015, 0.05854588, 0.05729143, 0.05923979, 0.066323996, 0.07274616, 0.07590699, 0.07609886, 0.064563274, 0.060665574, 0.06836051, 0.066320956, 0.06694138, 0.06509584, 0.06125864, 0.058789935, 0.059032638, 0.059505925},
																	{0.03083745, 0.04002426, 0.048804373, 0.05285545, 0.052480727, 0.056081366, 0.051411618, 0.057604074, 0.055370614, 0.05394589, 0.053403456, 0.04929959, 0.05787644, 0.062060628, 0.06349009, 0.06241295, 0.06305039, 0.061217483, 0.06167183, 0.066606164, 0.07081032, 0.07497156, 0.06989342, 0.05595277, 0.064745486, 0.067616105, 0.06849015, 0.06689048, 0.06448823, 0.06113561, 0.062087107, 0.061782155},
																	{0.030503754, 0.040610407, 0.04731652, 0.05371603, 0.055749685, 0.05759371, 0.050324608, 0.056064352, 0.055240966, 0.053556807, 0.049378354, 0.06425661, 0.07020396, 0.06578648, 0.07194066, 0.06739384, 0.07105553, 0.069102585, 0.06584054, 0.06095097, 0.06733811, 0.071282685, 0.0703696, 0.058421012, 0.057551373, 0.07317376, 0.067233324, 0.06416857, 0.063658416, 0.06404531, 0.064881265, 0.06366044},
																	{0.031163003, 0.040221203, 0.04924085, 0.053900413, 0.053380553, 0.052997243, 0.05163247, 0.05289854, 0.052324902, 0.048059225, 0.06500667, 0.07150757, 0.07595706, 0.07306403, 0.07511777, 0.076268196, 0.076444805, 0.074737966, 0.0730806, 0.07122904, 0.06795174, 0.06862104, 0.072034, 0.081973016, 0.07052994, 0.08020246, 0.07322937, 0.06605613, 0.06380975, 0.06143598, 0.0628894, 0.062019143},
																	{0.03219076, 0.04212381, 0.05238388, 0.05140253, 0.052074138, 0.056120913, 0.05504134, 0.049836744, 0.05241711, 0.06449318, 0.07197893, 0.07142115, 0.057416745, 0.07048613, 0.049185514, 0.06279367, 0.062258214, 0.07383275, 0.06610668, 0.067299366, 0.068327606, 0.06531894, 0.07077986, 0.07696247, 0.07902902, 0.07976574, 0.08049828, 0.07194424, 0.06618208, 0.06157521, 0.060015462, 0.05981637},
																	{0.03352157, 0.042324636, 0.05337209, 0.050816268, 0.057239696, 0.05298746, 0.054916967, 0.05293295, 0.06517589, 0.069249034, 0.061142705, 0.06554842, 0.055769056, 0.065711975, 0.06068196, 0.05541708, 0.06430352, 0.066827714, 0.058797672, 0.06257796, 0.06352198, 0.06134627, 0.06750035, 0.06992912, 0.06668413, 0.06922579, 0.076699555, 0.073768914, 0.07180935, 0.06739521, 0.06253564, 0.059565153},
																	{0.032719675, 0.041649956, 0.051575866, 0.053165868, 0.057262916, 0.051719528, 0.054832783, 0.058636986, 0.061472703, 0.06424767, 0.05882027, 0.055715676, 0.05565423, 0.05325737, 0.060838934, 0.06512171, 0.064667165, 0.06551802, 0.06595355, 0.059319213, 0.05691542, 0.058879383, 0.067031324, 0.062341504, 0.06566799, 0.06406963, 0.06266391, 0.064005494, 0.06699753, 0.070729494, 0.06828904, 0.06518412},
																	{0.03132684, 0.04090306, 0.048819788, 0.05211824, 0.05627529, 0.05467272, 0.052850794, 0.056978453, 0.05569148, 0.050850436, 0.041551385, 0.056832183, 0.057301275, 0.060030825, 0.06389272, 0.061648585, 0.0661667, 0.062680066, 0.067142844, 0.055272795, 0.06395447, 0.06597465, 0.06674087, 0.06544846, 0.062420473, 0.06552583, 0.06328577, 0.059171654, 0.0628441, 0.06501269, 0.066862226, 0.06702024},
																	{0.02924525, 0.03930828, 0.047088157, 0.0501143, 0.0542602, 0.055185292, 0.050205816, 0.05279929, 0.0504835, 0.05076282, 0.050640356, 0.047740217, 0.03932805, 0.052182898, 0.06378716, 0.06265402, 0.061546013, 0.060847517, 0.05772759, 0.06797874, 0.066351, 0.0635069, 0.05791442, 0.059513535, 0.05901846, 0.059638157, 0.06368971, 0.07020974, 0.070212185, 0.0654394, 0.064576924, 0.061504085},
																	{0.027230173, 0.03630125, 0.044516098, 0.047042746, 0.053855, 0.053351987, 0.04844381, 0.051742584, 0.05171015, 0.054066285, 0.05144384, 0.046838954, 0.048416443, 0.060935974, 0.059202082, 0.0645715, 0.042061903, 0.045514714, 0.05652682, 0.058080003, 0.057840683, 0.054493677, 0.053018436, 0.05291397, 0.055735964, 0.057414137, 0.05620389, 0.06192982, 0.064765096, 0.061437666, 0.0628981, 0.0618755},
																	{0.025783494, 0.03449532, 0.04300287, 0.0473035, 0.05302, 0.052145842, 0.04938024, 0.051766105, 0.0502751, 0.05043422, 0.048506007, 0.04827441, 0.054613538, 0.052852523, 0.054775015, 0.058304995, 0.053696744, 0.049602874, 0.05567383, 0.0561332, 0.05714605, 0.05512003, 0.05320802, 0.051490355, 0.051058337, 0.05128304, 0.053693194, 0.057818986, 0.055835854, 0.06294203, 0.06386459, 0.06140047},
																	{0.024742618, 0.03382056, 0.04184354, 0.04668441, 0.051266596, 0.050911635, 0.049224786, 0.05014743, 0.051424127, 0.05058736, 0.04923428, 0.050660487, 0.050452676, 0.054293677, 0.053496614, 0.05182372, 0.05133097, 0.047855638, 0.047281682, 0.049738545, 0.049763627, 0.049427792, 0.048180897, 0.047716126, 0.046761822, 0.046732794, 0.04808644, 0.05039982, 0.053085428, 0.0542941, 0.058152158, 0.05728119},
																	{0.02383843, 0.033028927, 0.040527005, 0.046553064, 0.049340583, 0.049888592, 0.04943654, 0.050128818, 0.051402405, 0.048215933, 0.04605543, 0.043940328, 0.04352537, 0.049514662, 0.049397875, 0.052366935, 0.050101276, 0.04975439, 0.047323264, 0.04806981, 0.044872135, 0.050174426, 0.047846448, 0.046070546, 0.04426795, 0.043853704, 0.043384496, 0.04323651, 0.050424572, 0.055929046, 0.054559913, 0.050718095},
																	{0.025866456, 0.033946335, 0.039870977, 0.045930475, 0.047283433, 0.049471565, 0.04689849, 0.048511393, 0.04792952, 0.043270767, 0.043783948, 0.04602404, 0.04586142, 0.050364364, 0.050332468, 0.050051004, 0.04639232, 0.046962474, 0.04697986, 0.04739402, 0.046329096, 0.044491094, 0.043704566, 0.042524386, 0.04076843, 0.040214416, 0.04034616, 0.04070316, 0.042305578, 0.046493415, 0.047037747, 0.047458787},
																	{0.030040458, 0.035326798, 0.039853, 0.044462353, 0.045820966, 0.04788336, 0.047227923, 0.04919758, 0.047065187, 0.043416243, 0.04624105, 0.04813487, 0.049071386, 0.046783462, 0.045798156, 0.043572918, 0.044706378, 0.046275366, 0.047255777, 0.045858357, 0.043400493, 0.040278934, 0.03712041, 0.035584893, 0.0347746, 0.03550378, 0.03821984, 0.038217537, 0.041348267, 0.0417747, 0.04515967, 0.045841385},
																	{0.032633755, 0.03822137, 0.040821165, 0.044691212, 0.04585138, 0.04755237, 0.050756775, 0.05105244, 0.04506891, 0.042922936, 0.04615935, 0.04715391, 0.048217677, 0.045301504, 0.04710513, 0.046574708, 0.046654206, 0.047082555, 0.0470287, 0.04266782, 0.037392136, 0.033716973, 0.031369556, 0.031425405, 0.03168735, 0.031024832, 0.036408238, 0.038390797, 0.039213356, 0.03924323, 0.040345505, 0.04104647},
																	{0.029227842, 0.034377273, 0.03866823, 0.043705262, 0.045810938, 0.049114555, 0.04976579, 0.05038257, 0.046399236, 0.043789506, 0.044276796, 0.0441178, 0.04584325, 0.044568244, 0.042216923, 0.044198237, 0.044928335, 0.043945227, 0.039683823, 0.035051435, 0.031482704, 0.029249076, 0.02805183, 0.028068192, 0.02847179, 0.028857034, 0.03259946, 0.03521276, 0.036601566, 0.03719171, 0.03816683, 0.038906243},
																	{0.028671347, 0.029256023, 0.033190325, 0.036694318, 0.039461005, 0.044055976, 0.0486196, 0.046780627, 0.046640493, 0.046030972, 0.048519142, 0.04292017, 0.042965285, 0.042085208, 0.045243684, 0.04600578, 0.044440813, 0.040481817, 0.035099965, 0.031293187, 0.028226584, 0.026711836, 0.026517447, 0.027297609, 0.028612178, 0.028767224, 0.033338055, 0.034766708, 0.03557417, 0.03722608, 0.03778815, 0.03830775},
																	{0.026035834, 0.028030384, 0.029631864, 0.030473437, 0.03300496, 0.035850603, 0.042056628, 0.04374875, 0.044543155, 0.04295722, 0.045083, 0.04440561, 0.045879155, 0.047445156, 0.046685625, 0.04260718, 0.037405543, 0.03345387, 0.029125262, 0.026624382, 0.02571838, 0.025722377, 0.026009854, 0.027591813, 0.028289665, 0.027894761, 0.032305732, 0.031447668, 0.03470286, 0.035952996, 0.033912316, 0.03475001},
																	{0.019742917, 0.021939151, 0.02595197, 0.027582668, 0.031285398, 0.03226991, 0.03967062, 0.041167878, 0.041662164, 0.039105777, 0.039180912, 0.03851459, 0.04141882, 0.040060855, 0.036565695, 0.03168836, 0.028211154, 0.026029885, 0.02488374, 0.02508625, 0.025786437, 0.025930263, 0.025890976, 0.025661636, 0.026080739, 0.02595152, 0.029567827, 0.029915664, 0.030795328, 0.030609239, 0.030386496, 0.03161945},
																	{0.020270545, 0.020218972, 0.022661358, 0.021058273, 0.030229498, 0.032116424, 0.03749242, 0.038138326, 0.039179996, 0.036679804, 0.034840513, 0.034270197, 0.03375989, 0.032313485, 0.028958105, 0.027083322, 0.02535341, 0.025385067, 0.025068648, 0.0252892, 0.025217004, 0.025216293, 0.024333883, 0.024340298, 0.02401647, 0.024354264, 0.025739979, 0.025890198, 0.025636513, 0.026889537, 0.027550433, 0.02856927}
													}
									},
									{
													{
																	{0.023282941, 0.030276388, 0.022394374, 0.025967885, 0.027699556, 0.035015356, 0.04542824, 0.04912052, 0.051521044, 0.05185139, 0.052612223, 0.05333532, 0.053508013, 0.053501397, 0.05373522, 0.051653035, 0.04930864, 0.04872844, 0.04916246, 0.048884854, 0.04923728, 0.04937573, 0.046004884, 0.038655054, 0.03600391, 0.028931782, 0.024448574, 0.020681497, 0.020771652, 0.022439089, 0.023941353, 0.025110614},
																	{0.03610795, 0.035670727, 0.03210163, 0.028631564, 0.038695395, 0.047785845, 0.053748563, 0.055623982, 0.057508595, 0.058467444, 0.058461223, 0.057965413, 0.056774087, 0.05521329, 0.05364835, 0.052059565, 0.051216193, 0.0512208, 0.052195966, 0.05358251, 0.056420326, 0.058756825, 0.058037207, 0.04402611, 0.042937607, 0.03563216, 0.029325746, 0.02388366, 0.022789866, 0.023432374, 0.024745382, 0.027897336},
																	{0.037893824, 0.033876624, 0.02681595, 0.03231852, 0.048779115, 0.05599954, 0.057767138, 0.05893812, 0.058369864, 0.05929465, 0.05943078, 0.059159566, 0.05881547, 0.05790552, 0.057087727, 0.056381956, 0.055606738, 0.05522139, 0.0549187, 0.055997305, 0.05675617, 0.057193086, 0.059385423, 0.046797737, 0.04808648, 0.042302895, 0.033888742, 0.02760937, 0.021733046, 0.021780722, 0.025063999, 0.02943208},
																	{0.039946645, 0.03844585, 0.036162864, 0.04131194, 0.050109837, 0.056307517, 0.055698738, 0.059072427, 0.058568384, 0.059001762, 0.057786778, 0.05736703, 0.058581285, 0.059793457, 0.060546067, 0.061358187, 0.061684456, 0.06401104, 0.06409979, 0.062591136, 0.054135393, 0.05523726, 0.052829817, 0.05243579, 0.050263777, 0.046059757, 0.040103383, 0.03345127, 0.029240541, 0.029269584, 0.03129163, 0.028801996},
																	{0.034705132, 0.034444805, 0.040545657, 0.044098474, 0.051927444, 0.055995896, 0.051928602, 0.050561074, 0.052554574, 0.053858735, 0.056031477, 0.056434467, 0.058408815, 0.05951217, 0.058706135, 0.059601877, 0.057108987, 0.062448744, 0.07077211, 0.06983197, 0.061940957, 0.05696301, 0.050088134, 0.048795532, 0.051494237, 0.047756895, 0.04473053, 0.0401185, 0.035888348, 0.03425658, 0.03096902, 0.027029332},
																	{0.0348593, 0.038265012, 0.040962484, 0.047527738, 0.050172042, 0.05106445, 0.05280652, 0.055145357, 0.05490237, 0.059627637, 0.06545162, 0.065791965, 0.07062912, 0.06699085, 0.06119043, 0.06262392, 0.057802152, 0.058498733, 0.062099334, 0.0576545, 0.06364304, 0.061511774, 0.058733646, 0.0547802, 0.05212525, 0.053179696, 0.05152584, 0.04684592, 0.04146422, 0.035197906, 0.029378332, 0.024641566},
																	{0.035463966, 0.038842, 0.045408823, 0.043760456, 0.05267014, 0.045160435, 0.05402534, 0.06126604, 0.06175856, 0.058295213, 0.061266784, 0.06256974, 0.07105243, 0.0673424, 0.056919433, 0.05871771, 0.058580726, 0.05717215, 0.058617502, 0.06028078, 0.060779657, 0.058911845, 0.058552276, 0.060931098, 0.057348024, 0.05423154, 0.05416447, 0.053596985, 0.04753021, 0.04163158, 0.03273328, 0.025013},
																	{0.03796003, 0.04100623, 0.046101548, 0.048526574, 0.046404704, 0.053011835, 0.061344855, 0.06409395, 0.05374762, 0.06391126, 0.05676894, 0.062092803, 0.06305224, 0.0691905, 0.05555368, 0.058786202, 0.05818558, 0.05713126, 0.05781964, 0.059493657, 0.061992086, 0.060196634, 0.056977954, 0.057447914, 0.05859124, 0.057624143, 0.05480484, 0.054853246, 0.053257674, 0.047144983, 0.04224662, 0.031379726},
																	{0.036401328, 0.03761828, 0.041174557, 0.04008243, 0.042345952, 0.04184079, 0.04981144, 0.055593003, 0.06406969, 0.05572493, 0.053240962, 0.051844954, 0.058809888, 0.052782327, 0.053545788, 0.05748381, 0.058309086, 0.059926186, 0.05893798, 0.059044503, 0.06134997, 0.059905916, 0.059212014, 0.056681402, 0.061039563, 0.059706323, 0.057558365, 0.055231065, 0.054379005, 0.050994866, 0.04984839, 0.04187358},
																	{0.03379103, 0.03497253, 0.03570289, 0.033685096, 0.037472866, 0.03977819, 0.039788753, 0.042571716, 0.055751413, 0.05181311, 0.052159358, 0.054027744, 0.05629082, 0.057486743, 0.059023447, 0.06075945, 0.060536977, 0.060406484, 0.060105145, 0.061626203, 0.062473234, 0.0590926, 0.06065769, 0.060288157, 0.05470342, 0.06058795, 0.060682006, 0.05565582, 0.05490957, 0.052664757, 0.053293698, 0.051775467},
																	{0.03359995, 0.034245823, 0.033351466, 0.032142963, 0.038228467, 0.042003505, 0.03999616, 0.043388564, 0.05308894, 0.054589357, 0.05560866, 0.056238145, 0.057131756, 0.05957604, 0.06122757, 0.06337756, 0.060416006, 0.062895894, 0.06197157, 0.0605089, 0.06568718, 0.06504899, 0.06417537, 0.06382012, 0.062254056, 0.059298564, 0.06319213, 0.061178897, 0.055712644, 0.053297523, 0.05333674, 0.053832978},
																	{0.03606235, 0.032270525, 0.032149095, 0.038644996, 0.0349385, 0.0431784, 0.040204514, 0.048107255, 0.05097923, 0.052640077, 0.053557675, 0.05747045, 0.05637805, 0.062791646, 0.06457758, 0.06504762, 0.06521517, 0.065910935, 0.0641377, 0.06764823, 0.06747186, 0.07235795, 0.06945372, 0.067874014, 0.06562823, 0.06250423, 0.061568197, 0.06297481, 0.058205314, 0.052569512, 0.054856986, 0.054955654},
																	{0.036796913, 0.0434141, 0.042038452, 0.046499606, 0.041739225, 0.04512046, 0.04367496, 0.049770474, 0.053156953, 0.05497436, 0.052971996, 0.055271033, 0.056817044, 0.05920729, 0.061842345, 0.06571525, 0.0702858, 0.06513196, 0.06788695, 0.07094133, 0.0761767, 0.0753178, 0.0799793, 0.07243633, 0.07229018, 0.06923181, 0.0674091, 0.067405045, 0.06374085, 0.058194604, 0.05798878, 0.05837194},
																	{0.036741473, 0.045394562, 0.049016986, 0.05046067, 0.045402363, 0.044762474, 0.046286426, 0.054855082, 0.053354733, 0.056139164, 0.05678594, 0.055306148, 0.05830876, 0.05905578, 0.06380504, 0.06738764, 0.066337824, 0.06324738, 0.071582556, 0.07345879, 0.076037884, 0.07910246, 0.066425025, 0.074540555, 0.0695523, 0.06953901, 0.0689466, 0.06815839, 0.06553233, 0.059315734, 0.057805512, 0.059166256},
																	{0.033763427, 0.043767784, 0.05177841, 0.051536623, 0.047816787, 0.048346806, 0.049606014, 0.05456218, 0.05608436, 0.056633834, 0.05634687, 0.05445827, 0.053417355, 0.054635923, 0.0571036, 0.05877558, 0.059702672, 0.060072377, 0.06675136, 0.07552558, 0.07686818, 0.077721655, 0.0707975, 0.060117718, 0.068556964, 0.06759846, 0.06656021, 0.064599514, 0.0607258, 0.058148522, 0.0578463, 0.05810879},
																	{0.033849914, 0.043210465, 0.05249775, 0.056662887, 0.054537896, 0.05650986, 0.05149098, 0.05735071, 0.05666832, 0.054582957, 0.05711237, 0.053239934, 0.06564033, 0.07057577, 0.06537104, 0.062845826, 0.06605369, 0.064260244, 0.062487803, 0.069610775, 0.07165134, 0.07801449, 0.074826896, 0.0586165, 0.06779611, 0.069414854, 0.06865591, 0.06672138, 0.065324664, 0.061422493, 0.06139629, 0.060853362},
																	{0.030564405, 0.04421104, 0.049336925, 0.056821536, 0.0581205, 0.060288463, 0.05418597, 0.056200676, 0.05613356, 0.054117203, 0.0545, 0.071962476, 0.07435167, 0.072264254, 0.072942495, 0.06947577, 0.071653664, 0.06857324, 0.06898832, 0.06270045, 0.07084012, 0.07510549, 0.07436812, 0.06875682, 0.059922572, 0.07652658, 0.06936473, 0.065506935, 0.06466186, 0.063546956, 0.0644176, 0.06313157},
																	{0.030255988, 0.042449947, 0.050890658, 0.057157498, 0.057326395, 0.05649779, 0.05293033, 0.05323552, 0.052734543, 0.049427155, 0.06495988, 0.074402094, 0.07973939, 0.0794006, 0.07958609, 0.074208796, 0.077454805, 0.074226975, 0.07353437, 0.073200464, 0.070634544, 0.06991714, 0.073188365, 0.08805972, 0.08203763, 0.08468217, 0.07734549, 0.068639815, 0.064769864, 0.061019935, 0.061905626, 0.061259974},
																	{0.030572664, 0.04283429, 0.054688983, 0.054715976, 0.053634387, 0.058469184, 0.056398414, 0.055703305, 0.055165842, 0.07123786, 0.07751554, 0.074700415, 0.062595665, 0.073426366, 0.05521906, 0.06461108, 0.06282687, 0.07482278, 0.07082516, 0.07000774, 0.06974965, 0.06460315, 0.072853625, 0.081410825, 0.0807693, 0.082423925, 0.08394772, 0.07411575, 0.0676412, 0.062185254, 0.05973206, 0.05889788},
																	{0.033803124, 0.04362488, 0.055948548, 0.057462126, 0.05959204, 0.0629133, 0.059549104, 0.06020739, 0.065714896, 0.075927675, 0.065522134, 0.06594777, 0.059008088, 0.06723553, 0.06239159, 0.06184422, 0.067218065, 0.06782359, 0.06366217, 0.06633967, 0.065384805, 0.06513572, 0.07111573, 0.0734694, 0.06824887, 0.07261062, 0.0760715, 0.07488686, 0.073290765, 0.06938088, 0.063813746, 0.060096283},
																	{0.033973, 0.043328736, 0.053489428, 0.058431838, 0.062365834, 0.06349045, 0.058693297, 0.0646351, 0.065063775, 0.07226467, 0.06647706, 0.062127665, 0.061559875, 0.058580432, 0.065467775, 0.068989635, 0.066367924, 0.06991112, 0.06865704, 0.065021336, 0.061213095, 0.06357026, 0.07084179, 0.06717718, 0.0698902, 0.069847345, 0.06449747, 0.06533414, 0.06827623, 0.07217318, 0.07010734, 0.06671184},
																	{0.033414554, 0.042986657, 0.050118376, 0.056819353, 0.061225154, 0.06342256, 0.05616781, 0.062300306, 0.06170946, 0.060497094, 0.049795453, 0.060005203, 0.05906822, 0.06218903, 0.06516808, 0.06285721, 0.06631887, 0.062470302, 0.06799793, 0.05888257, 0.06932598, 0.07028985, 0.06697887, 0.067383945, 0.06431544, 0.07121992, 0.06613338, 0.06259847, 0.065066755, 0.06670964, 0.06814903, 0.06809807},
																	{0.0312577, 0.042135447, 0.04899714, 0.05628415, 0.061162952, 0.061272398, 0.055481497, 0.058611788, 0.058028717, 0.057600264, 0.058035783, 0.05383052, 0.044729684, 0.056128852, 0.06710905, 0.062437493, 0.063489795, 0.062005866, 0.061788827, 0.07319617, 0.069570184, 0.063782334, 0.056967296, 0.059052277, 0.06113067, 0.06369388, 0.068379164, 0.07304233, 0.07313341, 0.06798339, 0.06633884, 0.06275785},
																	{0.028507777, 0.039537996, 0.04705022, 0.05397055, 0.059730202, 0.058877494, 0.053990394, 0.057093926, 0.05731058, 0.058186695, 0.057931017, 0.05289521, 0.053110246, 0.06533843, 0.060862575, 0.06434357, 0.045009293, 0.047585744, 0.059141543, 0.06163848, 0.05916294, 0.054990765, 0.053169698, 0.05494988, 0.056792706, 0.0584524, 0.062395297, 0.06529367, 0.06613666, 0.06272143, 0.065149724, 0.06346458},
																	{0.026741918, 0.036887538, 0.045584783, 0.052938703, 0.05773784, 0.056177408, 0.05358404, 0.05567376, 0.05450578, 0.05495821, 0.053148005, 0.05317173, 0.05986214, 0.057071723, 0.057280045, 0.059546966, 0.059749775, 0.056462996, 0.058022264, 0.059434243, 0.06003741, 0.056970607, 0.05462125, 0.05332439, 0.05086577, 0.051656783, 0.054330252, 0.059955005, 0.057569373, 0.06283456, 0.06593257, 0.06316495},
																	{0.025480118, 0.035676066, 0.04435315, 0.052046597, 0.055063732, 0.05442079, 0.05371915, 0.054476894, 0.05480487, 0.053859003, 0.052844435, 0.053017195, 0.055932567, 0.055925906, 0.053683292, 0.0555439, 0.052806288, 0.049319223, 0.049656674, 0.053974655, 0.054273088, 0.05376201, 0.050800316, 0.048943963, 0.047447775, 0.047451302, 0.048423763, 0.04963202, 0.05771572, 0.05737719, 0.059872646, 0.058171146},
																	{0.024495885, 0.034341462, 0.043018047, 0.05090226, 0.052824132, 0.052515436, 0.051433638, 0.05276868, 0.055330615, 0.052239243, 0.050374374, 0.049564794, 0.04631815, 0.050953127, 0.049670003, 0.05362099, 0.05055211, 0.05008823, 0.048079997, 0.049271215, 0.04938512, 0.051931303, 0.04838365, 0.045957353, 0.043798573, 0.043417133, 0.04239554, 0.04145695, 0.050415974, 0.05800325, 0.056368414, 0.05163164},
																	{0.026232984, 0.035236094, 0.04250508, 0.05031401, 0.0505801, 0.052514736, 0.051761113, 0.053937867, 0.053277794, 0.04790408, 0.047323372, 0.048412494, 0.047689635, 0.051798802, 0.051022463, 0.05070782, 0.047211725, 0.047277153, 0.04721085, 0.047745932, 0.046268273, 0.044160597, 0.042911846, 0.04193053, 0.040122226, 0.039324228, 0.039903507, 0.039754804, 0.041376263, 0.046531487, 0.04738056, 0.04755258},
																	{0.03137819, 0.036883757, 0.042288426, 0.04912792, 0.04803431, 0.05114606, 0.052298155, 0.05457269, 0.052430205, 0.046512198, 0.04762406, 0.049415495, 0.050026156, 0.048032414, 0.04712962, 0.043569785, 0.044708718, 0.04584497, 0.04719954, 0.045970473, 0.043386843, 0.040349264, 0.03662163, 0.035853393, 0.034378283, 0.035267718, 0.03843481, 0.03874951, 0.04073827, 0.041762903, 0.04497866, 0.04547363},
																	{0.03637506, 0.04151407, 0.04368263, 0.048334353, 0.048108086, 0.049598362, 0.054828867, 0.05615811, 0.04914545, 0.044297423, 0.04787437, 0.048444387, 0.051970728, 0.047012236, 0.0480935, 0.047213864, 0.04650514, 0.046649467, 0.04765947, 0.04371796, 0.037888907, 0.033738118, 0.030819692, 0.031684607, 0.031635363, 0.031843185, 0.03719882, 0.03916832, 0.03945449, 0.039049603, 0.040180545, 0.040440146},
																	{0.033515483, 0.038409818, 0.042706806, 0.04771816, 0.047636483, 0.050543196, 0.05478219, 0.05639587, 0.049997527, 0.04421655, 0.044618417, 0.04546937, 0.04833518, 0.045868594, 0.042039204, 0.045263052, 0.04485793, 0.044524726, 0.04111171, 0.03592517, 0.03199014, 0.029218081, 0.027789507, 0.028206155, 0.028350476, 0.028192107, 0.03263887, 0.035112806, 0.036209792, 0.036750082, 0.03748278, 0.03848704},
																	{0.030271214, 0.03310914, 0.039377425, 0.042680915, 0.0448789, 0.04747665, 0.053773113, 0.05304395, 0.047500562, 0.046619833, 0.050362382, 0.042623084, 0.043935623, 0.04180883, 0.044802632, 0.045651805, 0.0454746, 0.042118046, 0.036581606, 0.032141566, 0.0285903, 0.02697688, 0.026489686, 0.027286705, 0.029023256, 0.02867058, 0.03366936, 0.035751697, 0.035640314, 0.036429804, 0.036953613, 0.037662033},
																	{0.027427722, 0.029986482, 0.03256774, 0.035261564, 0.036322437, 0.038433198, 0.04657024, 0.047931734, 0.047189858, 0.04481839, 0.046650402, 0.045391425, 0.04521404, 0.047400575, 0.047356397, 0.045245852, 0.040090863, 0.035673283, 0.030300308, 0.02716877, 0.026408792, 0.026570957, 0.026928999, 0.028309852, 0.028696585, 0.027545396, 0.032248892, 0.03171378, 0.032905106, 0.034632064, 0.033791997, 0.034138836},
																	{0.021191526, 0.023865111, 0.027624443, 0.030397229, 0.032408763, 0.033443928, 0.041071106, 0.043052893, 0.043527547, 0.04027767, 0.04105773, 0.038113464, 0.042647164, 0.041857556, 0.038914572, 0.03462876, 0.030347086, 0.027415447, 0.025462095, 0.025334433, 0.025873829, 0.026782218, 0.026876554, 0.02673021, 0.026204795, 0.027536377, 0.029954158, 0.030708786, 0.030550119, 0.030666243, 0.030263994, 0.031074602},
																	{0.021087203, 0.0215955, 0.023635738, 0.022729658, 0.029800165, 0.031205025, 0.03700386, 0.038503278, 0.04002617, 0.03785516, 0.036326203, 0.03642027, 0.03616113, 0.0344656, 0.031156067, 0.029159967, 0.026854154, 0.02611208, 0.025753554, 0.025734603, 0.025593173, 0.025986388, 0.025310513, 0.024641506, 0.023925155, 0.02587594, 0.02697805, 0.02726354, 0.026148647, 0.02689566, 0.0275133, 0.02854507}
													}
									}
					};


	private DataManager manager;

	static {
		Properties props = new Properties();
		// log4j.rootLogger=warn, console
		props.setProperty("log4j.rootLogger", "warn");
		props.setProperty("log4j.logger.MessageCenter.INTERNAL.anl", "warn");
		PropertyConfigurator.configure(props);
	}

	public DataTests() throws Exception {
		DefaultPluginsCollector collector = new DefaultPluginsCollector();
		ExtendedProperties eprops = new ExtendedProperties();
		eprops.put("org.java.plugin.boot.pluginsRepositories", "./plugins");
		collector.configure(eprops);
		Collection locations = collector.collectPluginLocations();
		PluginManager pluginManager = ObjectFactory.newInstance(eprops).createManager();
		pluginManager.publishPlugins((PluginManager.PluginLocation[])
						locations.toArray(new PluginManager.PluginLocation[locations.size()]));
		manager = new DataManager(pluginManager);
	}

	public void testTimeRange() throws IOException, ParseException {
		File f = new File("./data/pave_example_data/RADM_CONC_1");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		Formula formula = new FormulaFactory().createTileFormula("O3[1]", VUnits.createUnit("ppm"));
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		CoordAxis timeAxis = dataset.getCoordAxes().getTimeAxis();
		ranges.add(new AxisRange(timeAxis, 40, 2));
		ranges.add(new AxisRange(dataset.getCoordAxes().getZAxis(), 0, 1));

		ValidationResult validation = formula.validate(manager, ranges);
		assertEquals(ValidationResult.Status.PASS, validation.getStatus());
		DataFrame result = null;
		try {
			result = formula.evaluate(manager, ranges);
		} catch (IllegalFormulaException e) {
			fail(e.getMessage());
		}

		assertEquals(2 * 35 * 32, result.getSize());
		Axes<DataFrameAxis> axes = result.getAxes();
		DataFrameIndex index = result.getIndex();
		for (int t = 0; t < axes.getTimeAxis().getRange().getExtent(); t++) {
			for (int x = 0; x < axes.getXAxis().getRange().getExtent(); x++) {
				for (int y = 0; y < axes.getYAxis().getRange().getExtent(); y++) {
					index.set(t, 0, x, y);
					assertEquals(t + ", 0, " + x + ", " + y, O3[t][0][y][x], result.getDouble(index), .0000001);
				}
			}
		}
		manager.closeAllDatasets();
	}

	public void testObs() throws IOException {
		File f = new File("C:\\Documents and Settings\\Nick Collier\\My Documents\\VERDI data\\AIRNOW_M8hrO3_20070609.ncf");
		// sample file with multiple layers and times (on Sun under /home/widing)
		//File f = new File("M:/PAVE/sampleFiles/pave_example_data/Ozone.ncf");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		Variable var = dataset.getVariables().get(0);
		ObsEvaluator eval = new ObsEvaluator(manager, var);
		int count = 0;
		for (ObsData data : eval.evaluate(0)) {
			count++;
		}
		assertEquals(1166, count);
		dataset.close();
	}

	public void testSlice() throws IOException, InvalidRangeException {
		File f = new File("./data/pave_example_data/RADM_CONC_1");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		Formula formula = new FormulaFactory().createTileFormula("O3[1]", VUnits.createUnit("ppm"));
		List<AxisRange> ranges = new ArrayList<AxisRange>();

		ValidationResult validation = formula.validate(manager, ranges);
		assertEquals(ValidationResult.Status.PASS, validation.getStatus());
		DataFrame result = null;
		try {
			result = formula.evaluate(manager, ranges);
		} catch (IllegalFormulaException e) {
			fail(e.getMessage());
		}

		Slice slice = new Slice();
		slice.setTimeRange(40, 2);
		slice.setLayerRange(0, 1);
		DataFrame dataFrame = result.slice(slice);

		assertEquals(2 * 35 * 32, dataFrame.getSize());
		Axes<DataFrameAxis> axes = dataFrame.getAxes();
		assertEquals(1, axes.getZAxis().getExtent());
		assertEquals(0, axes.getZAxis().getOrigin());
		DataFrameIndex index = dataFrame.getIndex();
		for (int t = 0; t < axes.getTimeAxis().getRange().getExtent(); t++) {
			for (int x = 0; x < axes.getXAxis().getRange().getExtent(); x++) {
				for (int y = 0; y < axes.getYAxis().getRange().getExtent(); y++) {
					index.set(t, 0, x, y);
					assertEquals(t + ", 0, " + x + ", " + y, O3[t][0][y][x], dataFrame.getDouble(index), .0000001);
				}
			}
		}

		slice = new Slice();
		slice.setTimeRange(40, 2);
		slice.setLayerRange(0, 1);
		slice.setYRange(0, 4);
		dataFrame = result.slice(slice);
		axes = dataFrame.getAxes();
		assertEquals(4, axes.getYAxis().getRange().getExtent());
		for (int t = 0; t < axes.getTimeAxis().getRange().getExtent(); t++) {
			for (int x = 0; x < axes.getXAxis().getRange().getExtent(); x++) {
				for (int y = 0; y < axes.getYAxis().getRange().getExtent(); y++) {
					index.set(t, 0, x, y);
					assertEquals(t + ", 0, " + x + ", " + y, O3[t][0][y][x], dataFrame.getDouble(index), .0000001);
				}
			}
		}

		manager.closeAllDatasets();
	}

	public void testTimesteps() throws IOException, ParseException {
		File f = new File("./data/pave_example_data/RADM_CONC_1");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());
		Axes<CoordAxis> axes = dataset.getCoordAxes();

		// test the getDate code on the axes.
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
		Date date = dateFormat.parse("1983-09-07 00:00:00 UTC");
		Calendar cal = GregorianCalendar.getInstance();
		cal.setTime(date);
		CoordAxis time = axes.getTimeAxis();
		Range range = time.getRange();
//		for (int i = (int) range.getOrigin(), n = (int) (range.getOrigin() + range.getExtent()); i < n; i++) {
		int iOrigin = (int) range.getOrigin();
		int iExtent = (int) range.getExtent();
		int n = iOrigin + iExtent;
		for (int i = iOrigin; i < n; i++) {
			assertEquals(cal.getTime().getTime(), axes.getDate(i).getTime());
			cal.add(Calendar.HOUR, 1);
		}
		manager.closeAllDatasets();
	}

	public void testBigFile() throws IOException {
		File f = new File("e:/VERDI DATA/CCTM_CB05_A.200107.combine.conc");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("O3[1]", VUnits.createUnit("ppbV"));
		ValidationResult validation = formula.validate(manager, new ArrayList<AxisRange>());
		assertEquals(ValidationResult.Status.PASS, validation.getStatus());
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		DataFrame result = null;
		try {
			result = formula.evaluate(manager, ranges);
		} catch (IllegalFormulaException e) {
			fail(e.getMessage());
		}

		assertEquals(744 * 1 * 188 * 213, result.getSize());
		manager.closeAllDatasets();
	}

	public void testSimpleAvgRangeFormula() throws IOException, ParseException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTimeStepFormula("DRY_N[1] + DRY_S[1]", VUnits.createUnit("kg/ha"));
		Axes<CoordAxis> axes = dataset.getCoordAxes();

		AxisRange xRange = new AxisRange(axes.getXAxis(), 105, 6);
		AxisRange yRange = new AxisRange(axes.getYAxis(), 10, 3);
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		ranges.add(xRange);
		ranges.add(yRange);

		ValidationResult validation = formula.validate(manager, new ArrayList<AxisRange>());
		assertEquals(ValidationResult.Status.PASS, validation.getStatus());
		DataFrame result = null;
		try {
			result = formula.evaluate(manager, ranges);
		} catch (IllegalFormulaException e) {
			fail(e.getMessage());
		}

		assertEquals(1, result.getSize());
		Axes<DataFrameAxis> rAxes = result.getAxes();

		assertEquals(2, rAxes.getAxes().size());
		assertNull(rAxes.getXAxis());
		assertNull(rAxes.getYAxis());
		assertNotNull(rAxes.getZAxis());

		double sum = 0;
		double[][] vals = DRY_N[0][0];
		for (int row = 0; row < 3; row++) {
			for (int col = 0; col < 6; col++) {
				sum += vals[row][col];
			}
		}
		double avg = sum / 18;

		vals = DRY_S[0][0];
		sum = 0;
		for (int row = 0; row < 3; row++) {
			for (int col = 0; col < 6; col++) {
				sum += vals[row][col];
			}
		}

		avg += sum / 18;
		DataFrameIndex index = result.getIndex();
		index.setTime(0);
		assertEquals(avg, result.getDouble(index), .00000001);

		// test the getDate code on the axes.
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
		Date date = dateFormat.parse("2001-01-01 01:00:00 UTC");
		assertEquals(1, rAxes.getTimeAxis().getExtent());
		assertEquals(date.getTime(), rAxes.getDate(0).getTime());
		manager.closeAllDatasets();
	}

	public void testSimpleRangeFormula() throws IOException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("DRY_N[1] + DRY_S[1]", VUnits.createUnit("kg/ha"));
		Axes<CoordAxis> axes = dataset.getCoordAxes();

		AxisRange xRange = new AxisRange(axes.getXAxis(), 105, 6);
		AxisRange yRange = new AxisRange(axes.getYAxis(), 10, 3);
		AxisRange layerRange = new AxisRange(axes.getZAxis(), 0, 1);
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		ranges.add(xRange);
		ranges.add(yRange);
		ranges.add(layerRange);

		ValidationResult validation = formula.validate(manager, new ArrayList<AxisRange>());
		assertEquals(ValidationResult.Status.PASS, validation.getStatus());
		DataFrame result = null;
		try {
			result = formula.evaluate(manager, ranges);
		} catch (IllegalFormulaException e) {
			fail(e.getMessage());
		}
		int shape[] = {1, 1, 3, 6};

		assertEquals(18, result.getSize());

		DataFrameIndex index = result.getIndex();
		Axes<DataFrameAxis> rAxes = result.getAxes();
		for (int t = 0; t < rAxes.getTimeAxis().getExtent(); t++) {
			for (int l = 0; l < shape[1]; l++) {
				for (int row = 0; row < shape[2]; row++) {
					for (int col = 0; col < shape[3]; col++) {
						index.set(t, l, col, row);
						assertEquals(DRY_N[t][l][row][col] + DRY_S[t][l][row][col], result.getDouble(index), .000001);
					}
				}
			}
		}
		manager.closeAllDatasets();
	}

	public void testUnitConversionFormula() throws IOException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("DRY_N[1] + DRY_S[1]", VUnits.createUnit("g/m2"));
		Axes<CoordAxis> axes = dataset.getCoordAxes();

		AxisRange xRange = new AxisRange(axes.getXAxis(), 105, 6);
		AxisRange yRange = new AxisRange(axes.getYAxis(), 10, 3);
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		ranges.add(xRange);
		ranges.add(yRange);

		ValidationResult validation = formula.validate(manager, new ArrayList<AxisRange>());
		assertEquals(ValidationResult.Status.PASS, validation.getStatus());
		DataFrame result = null;
		try {
			result = formula.evaluate(manager, ranges);
		} catch (IllegalFormulaException e) {
			fail(e.getMessage());
		}
		int shape[] = {1, 1, 3, 6};

		assertEquals(18, result.getSize());

		DataFrameIndex index = result.getIndex();
		Axes<DataFrameAxis> rAxes = result.getAxes();
		for (int t = 0; t < rAxes.getTimeAxis().getExtent(); t++) {
			for (int l = 0; l < shape[1]; l++) {
				for (int row = 0; row < shape[2]; row++) {
					for (int col = 0; col < shape[3]; col++) {
						index.set(t, l, col, row);
						assertEquals(kghaTogm2(DRY_N[t][l][row][col]) +
										kghaTogm2(DRY_S[t][l][row][col]), result.getDouble(index), .000001);
					}
				}
			}
		}
		manager.closeAllDatasets();
	}

	// convert kg / ha to g / m2
	private double kghaTogm2(double val) {
		// covert val to grams from kg and then divide by number of meters (10,000)
		// in a hectare
		return val * 1000 / 10000;
	}

	public void testBadUnitsFormula() throws IOException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("DRY_N[1] + DRY_S[1]", VUnits.createUnit("ppm"));
		Axes<CoordAxis> axes = dataset.getCoordAxes();

		AxisRange xRange = new AxisRange(axes.getXAxis(), 105, 6);
		AxisRange yRange = new AxisRange(axes.getYAxis(), 10, 3);
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		ranges.add(xRange);
		ranges.add(yRange);

		ValidationResult validation = formula.validate(manager, ranges);
		assertEquals(ValidationResult.Status.FAIL, validation.getStatus());
		manager.closeAllDatasets();
	}

	// for this actually test layer failure the other checks need to be
	// turned off in FormulaValidator
	public void testBadLayersFormula() throws IOException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		f = new File("./data/pave_example_data/RADM_CONC_1");
		url = f.toURI().toURL();
		datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		dataset = datasets.get(0);
		assertEquals("[2]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("DRY_N[1] + O3[2]", VUnits.createUnit("PPM"));
//		Axes<CoordAxis> axes = dataset.getCoordAxes();		// 2014 local var axes not used

		//AxisRange xRange = new AxisRange(axes.getLayerAxis(), 105, 6);
		//AxisRange yRange = new AxisRange(axes.getYAxis(), 10, 3);
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		//ranges.add(xRange);
		//ranges.add(yRange);

		ValidationResult validation = formula.validate(manager, ranges);
		assertEquals(ValidationResult.Status.FAIL, validation.getStatus());
		manager.closeAllDatasets();
	}

	// for this actually test XY failure the other checks need to be
	// turned off in FormulaValidator
	public void testBadXYFormula() throws IOException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		f = new File("./data/pave_example_data/RADM_CONC_1");
		url = f.toURI().toURL();
		datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		dataset = datasets.get(0);
		assertEquals("[2]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("DRY_N[1] + O3[2]", VUnits.createUnit("PPM"));
//		Axes<CoordAxis> axes = dataset.getCoordAxes();		// 2014 local var axes not used

		//AxisRange xRange = new AxisRange(axes.getLayerAxis(), 105, 6);
		//AxisRange yRange = new AxisRange(axes.getYAxis(), 10, 3);
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		//ranges.add(xRange);
		//ranges.add(yRange);

		ValidationResult validation = formula.validate(manager, ranges);
		assertEquals(ValidationResult.Status.FAIL, validation.getStatus());
		manager.closeAllDatasets();
	}

	public void testBadXRangeFormula() throws IOException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("DRY_N[1] + DRY_S[1]", VUnits.createUnit("ppm"));
		Axes<CoordAxis> axes = dataset.getCoordAxes();

		AxisRange xRange = new AxisRange(axes.getXAxis(), 10, 2000);
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		ranges.add(xRange);

		ValidationResult validation = formula.validate(manager, ranges);
		assertEquals(ValidationResult.Status.FAIL, validation.getStatus());
		manager.closeAllDatasets();
	}

	public void testBadYRangeFormula() throws IOException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("DRY_N[1] + DRY_S[1]", VUnits.createUnit("ppm"));
		Axes<CoordAxis> axes = dataset.getCoordAxes();

		AxisRange yRange = new AxisRange(axes.getYAxis(), 10, 2000);
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		ranges.add(yRange);

		ValidationResult validation = formula.validate(manager, ranges);
		assertEquals(ValidationResult.Status.FAIL, validation.getStatus());
		manager.closeAllDatasets();
	}

	public void testBadLayerRangeFormula() throws IOException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("DRY_N[1] + DRY_S[1]", VUnits.createUnit("ppm"));
		Axes<CoordAxis> axes = dataset.getCoordAxes();

		AxisRange layerRange = new AxisRange(axes.getZAxis(), 10, 3);
		List<AxisRange> ranges = new ArrayList<AxisRange>();
		ranges.add(layerRange);

		ValidationResult validation = formula.validate(manager, ranges);
		assertEquals(ValidationResult.Status.FAIL, validation.getStatus());
		manager.closeAllDatasets();
	}

	public void testSimpleNoLayerFormula() throws IOException {
		File f = new File("E:/VERDI data/wrfout_nudge.nc");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = null;
		for (Dataset d : datasets) {
			if (d.getVariableNames().contains("SST")) {
				dataset = d;
				break;
			}
		}

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("SST" + dataset.getAlias(), null);
		DataFrame result = null;

		ValidationResult validation = formula.validate(manager, new ArrayList<AxisRange>());
		assertEquals(ValidationResult.Status.PASS, validation.getStatus());
		try {
			result = formula.evaluate(manager, new ArrayList<AxisRange>());
		} catch (IllegalFormulaException e) {
			fail(e.getMessage());
		}

		DataFrameIndex dfIndex = result.getIndex();
		for (int t = 0; t < 7; t++) {
			dfIndex.setTime(t);
			double sum = 0;
			for (int x = 0; x < 164; x++) {
				for (int y = 0; y < 128; y++) {
					dfIndex.setXY(x, y);
					sum += result.getDouble(dfIndex);
				}
			}
			System.out.println("avg = " + sum / (128 * 164));
		}

		assertEquals(3, result.getAxes().getAxes().size());
		assertTrue(result.getAxes().getTimeAxis() != null);
		assertTrue(result.getAxes().getZAxis() == null);
		assertTrue(result.getAxes().getXAxis() != null);
		assertTrue(result.getAxes().getYAxis() != null);

		assertEquals(7 * 128 * 164, result.getSize());

		//SST(0:3:1, 100:127:1, 150:163:1)
		int[] origin = {0, 100, 150};
		int shape[] = {4, 28, 14};

		DataFrameIndex index = result.getIndex();
		for (int t = 0; t < shape[0]; t++) {
			index.setTime(t + origin[0]);
			for (int row = 0; row < shape[1]; row++) {
				for (int col = 0; col < shape[2]; col++) {
					index.setXY(col + origin[2], row + origin[1]);
					assertEquals(SST[t][row][col], result.getDouble(index), .0001);
				}
			}
		}
		manager.closeAllDatasets();
	}

	public void testSimpleFormula() throws IOException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("DRY_N[1]", VUnits.createUnit("kg/ha"));
		DataFrame result = null;

		ValidationResult validation = formula.validate(manager, new ArrayList<AxisRange>());
		assertEquals(ValidationResult.Status.PASS, validation.getStatus());
		try {
			result = formula.evaluate(manager, new ArrayList<AxisRange>());
		} catch (IllegalFormulaException e) {
			fail(e.getMessage());
		}

		int[] origin = {0, 0, 10, 105};
		int shape[] = {1, 1, 3, 6};

		assertEquals(16576, result.getSize());

		DataFrameIndex index = result.getIndex();
		for (int t = 0; t < shape[0]; t++) {
			for (int l = 0; l < shape[1]; l++) {
				for (int row = 0; row < shape[2]; row++) {
					for (int col = 0; col < shape[3]; col++) {
						index.set(t + origin[0], l + origin[1], col + origin[3],
										row + origin[2]);
						assertEquals(DRY_N[t][l][row][col], result.getDouble(index), .000001);
					}
				}
			}
		}
		manager.closeAllDatasets();
	}

	public void testSimpleAddFormula() throws IOException {
		File f = new File("./plugins/pave2.data.loaders/test/anl/verdi/loaders/agg.cctmJ3fx.b312.nh3c1.dep_wa.annual.2001base");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertNotSame(DataManager.NULL_DATASETS, datasets);
		Dataset dataset = datasets.get(0);
		assertEquals("[1]", dataset.getAlias());

		FormulaFactory factory = new FormulaFactory();
		Formula formula = factory.createTileFormula("DRY_N[1] + DRY_S[1]", VUnits.createUnit("kg/ha"));
		DataFrame result = null;

		ValidationResult validation = formula.validate(manager, new ArrayList<AxisRange>());
		assertEquals(ValidationResult.Status.PASS, validation.getStatus());
		try {
			result = formula.evaluate(manager, new ArrayList<AxisRange>());
		} catch (IllegalFormulaException e) {
			fail(e.getMessage());
		}

		int[] origin = {0, 0, 10, 105};
		int shape[] = {1, 1, 3, 6};

		assertEquals(16576, result.getSize());

		DataFrameIndex index = result.getIndex();
		for (int t = 0; t < shape[0]; t++) {
			for (int l = 0; l < shape[1]; l++) {
				for (int row = 0; row < shape[2]; row++) {
					for (int col = 0; col < shape[3]; col++) {
						index.set(t + origin[0], l + origin[1], col + origin[3],
										row + origin[2]);
						assertEquals(DRY_N[t][l][row][col] + DRY_S[t][l][row][col], result.getDouble(index), .000001);
					}
				}
			}
		}
		manager.closeAllDatasets();
	}

	public void testCreateBadDataset() throws IOException {
		File f = new File("./plugins/core/src/anl/verdi/data/Dataset.java");
		URL url = f.toURI().toURL();
		List<Dataset> datasets = manager.createDatasets(url);
		assertEquals(DataManager.NULL_DATASETS, datasets);
		manager.closeAllDatasets();
	}

	public void testTimeStepAveragerNoLayer() throws IOException {
		// 3 time steps, 3 rows and 2 cols
		int[] shape = new int[]{3, 3, 2};
		int[][][] vals = new int[shape[0]][shape[1]][shape[2]];

		Array array = ArrayFactory.createDoubleArray(shape);
		Index index = array.getIndex();
		Random random = new Random();

		// we could calc. the expected avgs. in this
		// loop as well, but that's the same as the averager

		for (int t = 0; t < shape[0]; t++) {
			int[][] timeSlice = vals[t];

			for (int row = 0; row < shape[1]; row++) {
				for (int col = 0; col < shape[2]; col++) {
					index.set(t, row, col);
					int val = random.nextInt(10);
					timeSlice[row][col] = val;
					array.setDouble(index, val);
				}
			}
		}

		double[] expected = new double[3];
		for (int t = 0; t < shape[0]; t++) {
			int[][] timeSlice = vals[t];
			double expectedAvg = 0;
			double sum = 0;
			for (int row = 0; row < shape[1]; row++) {
				for (int col = 0; col < shape[2]; col++) {
					sum += timeSlice[row][col];
				}
			}
			expectedAvg = sum / 6;
			expected[t] = expectedAvg;

		}

		DataFrameBuilder builder = new DataFrameBuilder().setArray(array).
						addAxis(DataFrameAxis.createDataFrameAxis(new TestTimeCoordAxis(AxisType.TIME, shape[0]), 0)).
						addAxis(DataFrameAxis.createDataFrameAxis(new TestCoordAxis(AxisType.Y_AXIS, shape[1]), 1)).
						addAxis(DataFrameAxis.createDataFrameAxis(new TestCoordAxis(AxisType.X_AXIS, shape[2]), 2));
		DataFrame frame = builder.createDataFrame();
		DataTransformer trans = new TimeStepAverager();
		frame = trans.transform(frame);

		assertEquals(1, frame.getAxes().getAxes().size());
		DataFrameAxis timeAxis = frame.getAxes().getTimeAxis();
		assertTrue(frame.getAxes().getZAxis() == null);
		assertEquals(AxisType.TIME, timeAxis.getAxisType());
		assertEquals(AxisType.TIME, frame.getAxes().getAxes().get(0).getAxisType());
		assertEquals(3, timeAxis.getExtent());
		assertEquals(expected.length, timeAxis.getExtent());
		assertEquals(0, timeAxis.getArrayIndex());

		DataFrameIndex dfIndex = frame.getIndex();
		for (int i = 0; i < timeAxis.getExtent(); i++) {
			dfIndex.setTime(i);
			assertEquals(expected[i], frame.getDouble(dfIndex));
		}
	}

	public void testTimeStepAverager() throws IOException {
		// 3 time steps, 2 layers, 3 rows and 2 cols
		int[] shape = new int[]{3, 2, 3, 2};
		int[][][][] vals = new int[shape[0]][shape[1]][shape[2]][shape[3]];

		Array array = ArrayFactory.createDoubleArray(shape);
		Index index = array.getIndex();
		Random random = new Random();

		// we could calc. the expected avgs. in this
		// loop as well, but that's the same as the averager

		for (int t = 0; t < shape[0]; t++) {
			for (int l = 0; l < shape[1]; l++) {
				int[][] layerSlice = vals[t][l];
				for (int row = 0; row < shape[2]; row++) {
					for (int col = 0; col < shape[3]; col++) {
						index.set(t, l, row, col);
						int val = random.nextInt(10);
						layerSlice[row][col] = val;
						array.setDouble(index, val);
					}
				}
			}
		}

		double[][] expected = new double[3][2];
		for (int t = 0; t < shape[0]; t++) {
			double expectedAvg = 0;
			for (int l = 0; l < shape[1]; l++) {
				int[][] layerSlice = vals[t][l];
				double sum = 0;
				for (int row = 0; row < shape[2]; row++) {
					for (int col = 0; col < shape[3]; col++) {
						sum += layerSlice[row][col];
					}
				}
				expectedAvg = sum / 6;
				expected[t][l] = expectedAvg;
			}
		}

		DataFrameBuilder builder = new DataFrameBuilder().setArray(array).
						addAxis(DataFrameAxis.createDataFrameAxis(new TestTimeCoordAxis(AxisType.TIME, shape[0]), 0)).
						addAxis(DataFrameAxis.createDataFrameAxis(new TestCoordAxis(AxisType.LAYER, shape[1]), 1)).
						addAxis(DataFrameAxis.createDataFrameAxis(new TestCoordAxis(AxisType.Y_AXIS, shape[2]), 2)).
						addAxis(DataFrameAxis.createDataFrameAxis(new TestCoordAxis(AxisType.X_AXIS, shape[3]), 3));
		DataFrame frame = builder.createDataFrame();
		DataTransformer trans = new TimeStepAverager();
		frame = trans.transform(frame);

		assertEquals(2, frame.getAxes().getAxes().size());
		DataFrameAxis timeAxis = frame.getAxes().getTimeAxis();
		DataFrameAxis layerAxis = frame.getAxes().getZAxis();
		assertEquals(AxisType.TIME, timeAxis.getAxisType());
		assertEquals(AxisType.TIME, frame.getAxes().getAxes().get(0).getAxisType());
		assertEquals(3, timeAxis.getExtent());
		assertEquals(expected.length, timeAxis.getExtent());
		assertEquals(expected[0].length, layerAxis.getExtent());
		assertEquals(0, timeAxis.getArrayIndex());
		assertEquals(1, layerAxis.getArrayIndex());

		DataFrameIndex dfIndex = frame.getIndex();
		for (int i = 0; i < timeAxis.getExtent(); i++) {
			dfIndex.setTime(i);
			for (int l = 0; l < layerAxis.getExtent(); l++) {
				dfIndex.setLayer(l);
				assertEquals(expected[i][l], frame.getDouble(dfIndex));
			}
		}
		manager.closeAllDatasets();
	}

	class TestCoordAxis implements CoordAxis {

		private Range range;
		private AxisType type;


		public TestCoordAxis(AxisType type, int extent) {
			this.type = type;
			range = new Range(0, extent);
		}

		/**
		 * Gets the name of this CoordAxis. NOTE: Always returns NULL.
		 *
		 * @return the name of this CoordAxis.
		 */
		public String getName() {
			return null;
		}


		public Unit getUnits() {
			return VUnits.createUnit("TEST");
		}

		public double getValue(int index) {	// NOTE: Always returns 0.
			return 0;
		}


		public boolean isCompatible(CoordAxis axis) {	// NOTE: Always returns TRUE.
			return true;
		}

		/**
		 * Gets the description of this CoordAxis. NOTE: Always returns NULL.
		 *
		 * @return the description of this CoordAxis.
		 */
		public String getDescription() {
			return null;
		}

		/**
		 * Gets the range of this axis.
		 *
		 * @return the range of this axis.
		 */
		public Range getRange() {
			return range;
		}

		/**
		 * Gets the type of this axis.
		 *
		 * @return the type of this axis.
		 */
		public AxisType getAxisType() {
			return type;
		}
	}

	class TestTimeCoordAxis extends TestCoordAxis implements TimeCoordAxis {

		private TimeCoordAxis axis;

		public TestTimeCoordAxis(AxisType type, int extent) {
			super(type, extent);
		}
		
		public void setAxis(TimeCoordAxis anAxis)		// 2014 adding in a method to set the value of axis
		{
			this.axis = anAxis;
		}


		public GregorianCalendar getDate(int timestep) {	// method not previously implemented 2014
			return ((TimeCoordAxis)this.axis).getDate(timestep);
		}

		public int getTimeStep(Date date) {		// method not previously implemented 2014
			return ((TimeCoordAxis)this.axis).getTimeStep(date);
		}
		
		public int getTimeStep(GregorianCalendar aCalendar) {
			return ((TimeCoordAxis)this.axis).getTimeStep(aCalendar);
		}
	}
}
